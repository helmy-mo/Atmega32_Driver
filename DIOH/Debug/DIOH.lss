
DIOH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003a5c  00003ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002a60  00000000  00000000  00003ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e06  00000000  00000000  00006538  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000733e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000747e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000075ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009237  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a122  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000aed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ba8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 98 1b 	call	0x3730	; 0x3730 <main>
      7a:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_int>:
#define SFIOR	(*(volatile u8 *)0x50U)



void ADC_int(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,7);
     b3e:	a6 e2       	ldi	r26, 0x26	; 38
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e6 e2       	ldi	r30, 0x26	; 38
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	8c 93       	st	X, r24
}
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	08 95       	ret

00000b52 <ADC_Start>:
void ADC_Start(void)
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,6);
     b5a:	a6 e2       	ldi	r26, 0x26	; 38
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e6 e2       	ldi	r30, 0x26	; 38
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 64       	ori	r24, 0x40	; 64
     b66:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,4)!=1);
     b68:	e6 e2       	ldi	r30, 0x26	; 38
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	82 95       	swap	r24
     b70:	8f 70       	andi	r24, 0x0F	; 15
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	81 70       	andi	r24, 0x01	; 1
     b78:	90 70       	andi	r25, 0x00	; 0
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	a9 f3       	breq	.-22     	; 0xb68 <ADC_Start+0x16>

}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <ADC_Clear_Flag>:
void ADC_Clear_Flag(void)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,6));
     b8c:	e6 e2       	ldi	r30, 0x26	; 38
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 95       	swap	r24
     b94:	86 95       	lsr	r24
     b96:	86 95       	lsr	r24
     b98:	83 70       	andi	r24, 0x03	; 3
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	88 23       	and	r24, r24
     ba4:	99 f7       	brne	.-26     	; 0xb8c <ADC_Clear_Flag+0x8>
	//SET_BIT(ADCSRA,4);
}
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <ADC_Vref>:
void ADC_Vref(u8 Vref)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <ADC_Vref+0x6>
     bb2:	0f 92       	push	r0
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	89 83       	std	Y+1, r24	; 0x01
	switch(Vref)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	3b 83       	std	Y+3, r19	; 0x03
     bc2:	2a 83       	std	Y+2, r18	; 0x02
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	9b 81       	ldd	r25, Y+3	; 0x03
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	91 05       	cpc	r25, r1
     bcc:	c1 f0       	breq	.+48     	; 0xbfe <ADC_Vref+0x52>
     bce:	2a 81       	ldd	r18, Y+2	; 0x02
     bd0:	3b 81       	ldd	r19, Y+3	; 0x03
     bd2:	22 30       	cpi	r18, 0x02	; 2
     bd4:	31 05       	cpc	r19, r1
     bd6:	11 f1       	breq	.+68     	; 0xc1c <ADC_Vref+0x70>
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	9b 81       	ldd	r25, Y+3	; 0x03
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	61 f5       	brne	.+88     	; 0xc38 <ADC_Vref+0x8c>
	{
		case ADC_VREF_AREF:
			CLEAR_BIT(ADMUX,6);
     be0:	a7 e2       	ldi	r26, 0x27	; 39
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e7 e2       	ldi	r30, 0x27	; 39
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8f 7b       	andi	r24, 0xBF	; 191
     bec:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX,7);
     bee:	a7 e2       	ldi	r26, 0x27	; 39
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e7 e2       	ldi	r30, 0x27	; 39
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	8f 77       	andi	r24, 0x7F	; 127
     bfa:	8c 93       	st	X, r24
     bfc:	1d c0       	rjmp	.+58     	; 0xc38 <ADC_Vref+0x8c>
			break;
		case ADC_VREF_AVCC:
			CLEAR_BIT(ADMUX,7);
     bfe:	a7 e2       	ldi	r26, 0x27	; 39
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e2       	ldi	r30, 0x27	; 39
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	8f 77       	andi	r24, 0x7F	; 127
     c0a:	8c 93       	st	X, r24
			SET_BIT(ADMUX,6);
     c0c:	a7 e2       	ldi	r26, 0x27	; 39
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e2       	ldi	r30, 0x27	; 39
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 64       	ori	r24, 0x40	; 64
     c18:	8c 93       	st	X, r24
     c1a:	0e c0       	rjmp	.+28     	; 0xc38 <ADC_Vref+0x8c>
			break;
		case ADC_VREF_INTERNAL_2_56:
			SET_BIT(ADMUX,6);
     c1c:	a7 e2       	ldi	r26, 0x27	; 39
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e7 e2       	ldi	r30, 0x27	; 39
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	80 64       	ori	r24, 0x40	; 64
     c28:	8c 93       	st	X, r24
			SET_BIT(ADMUX,7);
     c2a:	a7 e2       	ldi	r26, 0x27	; 39
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e7 e2       	ldi	r30, 0x27	; 39
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	80 68       	ori	r24, 0x80	; 128
     c36:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <ADC_Channel>:
void ADC_Channel(u8 channle)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <ADC_Channel+0x6>
     c4a:	0f 92       	push	r0
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	89 83       	std	Y+1, r24	; 0x01
	switch(channle)
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3b 83       	std	Y+3, r19	; 0x03
     c5a:	2a 83       	std	Y+2, r18	; 0x02
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	8f 30       	cpi	r24, 0x0F	; 15
     c62:	91 05       	cpc	r25, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <ADC_Channel+0x24>
     c66:	47 c1       	rjmp	.+654    	; 0xef6 <ADC_Channel+0x2b2>
     c68:	2a 81       	ldd	r18, Y+2	; 0x02
     c6a:	3b 81       	ldd	r19, Y+3	; 0x03
     c6c:	20 31       	cpi	r18, 0x10	; 16
     c6e:	31 05       	cpc	r19, r1
     c70:	0c f0       	brlt	.+2      	; 0xc74 <ADC_Channel+0x30>
     c72:	5a c0       	rjmp	.+180    	; 0xd28 <ADC_Channel+0xe4>
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	9b 81       	ldd	r25, Y+3	; 0x03
     c78:	87 30       	cpi	r24, 0x07	; 7
     c7a:	91 05       	cpc	r25, r1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <ADC_Channel+0x3c>
     c7e:	f3 c0       	rjmp	.+486    	; 0xe66 <ADC_Channel+0x222>
     c80:	2a 81       	ldd	r18, Y+2	; 0x02
     c82:	3b 81       	ldd	r19, Y+3	; 0x03
     c84:	28 30       	cpi	r18, 0x08	; 8
     c86:	31 05       	cpc	r19, r1
     c88:	54 f5       	brge	.+84     	; 0xcde <ADC_Channel+0x9a>
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	9b 81       	ldd	r25, Y+3	; 0x03
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <ADC_Channel+0x52>
     c94:	c4 c0       	rjmp	.+392    	; 0xe1e <ADC_Channel+0x1da>
     c96:	2a 81       	ldd	r18, Y+2	; 0x02
     c98:	3b 81       	ldd	r19, Y+3	; 0x03
     c9a:	24 30       	cpi	r18, 0x04	; 4
     c9c:	31 05       	cpc	r19, r1
     c9e:	94 f4       	brge	.+36     	; 0xcc4 <ADC_Channel+0x80>
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	9b 81       	ldd	r25, Y+3	; 0x03
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	91 05       	cpc	r25, r1
     ca8:	09 f4       	brne	.+2      	; 0xcac <ADC_Channel+0x68>
     caa:	a7 c0       	rjmp	.+334    	; 0xdfa <ADC_Channel+0x1b6>
     cac:	2a 81       	ldd	r18, Y+2	; 0x02
     cae:	3b 81       	ldd	r19, Y+3	; 0x03
     cb0:	22 30       	cpi	r18, 0x02	; 2
     cb2:	31 05       	cpc	r19, r1
     cb4:	0c f0       	brlt	.+2      	; 0xcb8 <ADC_Channel+0x74>
     cb6:	aa c0       	rjmp	.+340    	; 0xe0c <ADC_Channel+0x1c8>
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <ADC_Channel+0x7e>
     cc0:	94 c0       	rjmp	.+296    	; 0xdea <ADC_Channel+0x1a6>
     cc2:	b0 c1       	rjmp	.+864    	; 0x1024 <ADC_Channel+0x3e0>
     cc4:	2a 81       	ldd	r18, Y+2	; 0x02
     cc6:	3b 81       	ldd	r19, Y+3	; 0x03
     cc8:	25 30       	cpi	r18, 0x05	; 5
     cca:	31 05       	cpc	r19, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <ADC_Channel+0x8c>
     cce:	b9 c0       	rjmp	.+370    	; 0xe42 <ADC_Channel+0x1fe>
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	86 30       	cpi	r24, 0x06	; 6
     cd6:	91 05       	cpc	r25, r1
     cd8:	0c f0       	brlt	.+2      	; 0xcdc <ADC_Channel+0x98>
     cda:	bc c0       	rjmp	.+376    	; 0xe54 <ADC_Channel+0x210>
     cdc:	a9 c0       	rjmp	.+338    	; 0xe30 <ADC_Channel+0x1ec>
     cde:	2a 81       	ldd	r18, Y+2	; 0x02
     ce0:	3b 81       	ldd	r19, Y+3	; 0x03
     ce2:	2b 30       	cpi	r18, 0x0B	; 11
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <ADC_Channel+0xa6>
     ce8:	e2 c0       	rjmp	.+452    	; 0xeae <ADC_Channel+0x26a>
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	9b 81       	ldd	r25, Y+3	; 0x03
     cee:	8c 30       	cpi	r24, 0x0C	; 12
     cf0:	91 05       	cpc	r25, r1
     cf2:	6c f4       	brge	.+26     	; 0xd0e <ADC_Channel+0xca>
     cf4:	2a 81       	ldd	r18, Y+2	; 0x02
     cf6:	3b 81       	ldd	r19, Y+3	; 0x03
     cf8:	29 30       	cpi	r18, 0x09	; 9
     cfa:	31 05       	cpc	r19, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <ADC_Channel+0xbc>
     cfe:	c5 c0       	rjmp	.+394    	; 0xe8a <ADC_Channel+0x246>
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	8a 30       	cpi	r24, 0x0A	; 10
     d06:	91 05       	cpc	r25, r1
     d08:	0c f0       	brlt	.+2      	; 0xd0c <ADC_Channel+0xc8>
     d0a:	c8 c0       	rjmp	.+400    	; 0xe9c <ADC_Channel+0x258>
     d0c:	b5 c0       	rjmp	.+362    	; 0xe78 <ADC_Channel+0x234>
     d0e:	2a 81       	ldd	r18, Y+2	; 0x02
     d10:	3b 81       	ldd	r19, Y+3	; 0x03
     d12:	2d 30       	cpi	r18, 0x0D	; 13
     d14:	31 05       	cpc	r19, r1
     d16:	09 f4       	brne	.+2      	; 0xd1a <ADC_Channel+0xd6>
     d18:	dc c0       	rjmp	.+440    	; 0xed2 <ADC_Channel+0x28e>
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	9b 81       	ldd	r25, Y+3	; 0x03
     d1e:	8e 30       	cpi	r24, 0x0E	; 14
     d20:	91 05       	cpc	r25, r1
     d22:	0c f0       	brlt	.+2      	; 0xd26 <ADC_Channel+0xe2>
     d24:	df c0       	rjmp	.+446    	; 0xee4 <ADC_Channel+0x2a0>
     d26:	cc c0       	rjmp	.+408    	; 0xec0 <ADC_Channel+0x27c>
     d28:	2a 81       	ldd	r18, Y+2	; 0x02
     d2a:	3b 81       	ldd	r19, Y+3	; 0x03
     d2c:	27 31       	cpi	r18, 0x17	; 23
     d2e:	31 05       	cpc	r19, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <ADC_Channel+0xf0>
     d32:	29 c1       	rjmp	.+594    	; 0xf86 <ADC_Channel+0x342>
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	88 31       	cpi	r24, 0x18	; 24
     d3a:	91 05       	cpc	r25, r1
     d3c:	2c f5       	brge	.+74     	; 0xd88 <ADC_Channel+0x144>
     d3e:	2a 81       	ldd	r18, Y+2	; 0x02
     d40:	3b 81       	ldd	r19, Y+3	; 0x03
     d42:	23 31       	cpi	r18, 0x13	; 19
     d44:	31 05       	cpc	r19, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <ADC_Channel+0x106>
     d48:	fa c0       	rjmp	.+500    	; 0xf3e <ADC_Channel+0x2fa>
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	9b 81       	ldd	r25, Y+3	; 0x03
     d4e:	84 31       	cpi	r24, 0x14	; 20
     d50:	91 05       	cpc	r25, r1
     d52:	6c f4       	brge	.+26     	; 0xd6e <ADC_Channel+0x12a>
     d54:	2a 81       	ldd	r18, Y+2	; 0x02
     d56:	3b 81       	ldd	r19, Y+3	; 0x03
     d58:	21 31       	cpi	r18, 0x11	; 17
     d5a:	31 05       	cpc	r19, r1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <ADC_Channel+0x11c>
     d5e:	dd c0       	rjmp	.+442    	; 0xf1a <ADC_Channel+0x2d6>
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	82 31       	cpi	r24, 0x12	; 18
     d66:	91 05       	cpc	r25, r1
     d68:	0c f0       	brlt	.+2      	; 0xd6c <ADC_Channel+0x128>
     d6a:	e0 c0       	rjmp	.+448    	; 0xf2c <ADC_Channel+0x2e8>
     d6c:	cd c0       	rjmp	.+410    	; 0xf08 <ADC_Channel+0x2c4>
     d6e:	2a 81       	ldd	r18, Y+2	; 0x02
     d70:	3b 81       	ldd	r19, Y+3	; 0x03
     d72:	25 31       	cpi	r18, 0x15	; 21
     d74:	31 05       	cpc	r19, r1
     d76:	09 f4       	brne	.+2      	; 0xd7a <ADC_Channel+0x136>
     d78:	f4 c0       	rjmp	.+488    	; 0xf62 <ADC_Channel+0x31e>
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	9b 81       	ldd	r25, Y+3	; 0x03
     d7e:	86 31       	cpi	r24, 0x16	; 22
     d80:	91 05       	cpc	r25, r1
     d82:	0c f0       	brlt	.+2      	; 0xd86 <ADC_Channel+0x142>
     d84:	f7 c0       	rjmp	.+494    	; 0xf74 <ADC_Channel+0x330>
     d86:	e4 c0       	rjmp	.+456    	; 0xf50 <ADC_Channel+0x30c>
     d88:	2a 81       	ldd	r18, Y+2	; 0x02
     d8a:	3b 81       	ldd	r19, Y+3	; 0x03
     d8c:	2b 31       	cpi	r18, 0x1B	; 27
     d8e:	31 05       	cpc	r19, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <ADC_Channel+0x150>
     d92:	1d c1       	rjmp	.+570    	; 0xfce <ADC_Channel+0x38a>
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	8c 31       	cpi	r24, 0x1C	; 28
     d9a:	91 05       	cpc	r25, r1
     d9c:	6c f4       	brge	.+26     	; 0xdb8 <ADC_Channel+0x174>
     d9e:	2a 81       	ldd	r18, Y+2	; 0x02
     da0:	3b 81       	ldd	r19, Y+3	; 0x03
     da2:	29 31       	cpi	r18, 0x19	; 25
     da4:	31 05       	cpc	r19, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <ADC_Channel+0x166>
     da8:	00 c1       	rjmp	.+512    	; 0xfaa <ADC_Channel+0x366>
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	8a 31       	cpi	r24, 0x1A	; 26
     db0:	91 05       	cpc	r25, r1
     db2:	0c f0       	brlt	.+2      	; 0xdb6 <ADC_Channel+0x172>
     db4:	03 c1       	rjmp	.+518    	; 0xfbc <ADC_Channel+0x378>
     db6:	f0 c0       	rjmp	.+480    	; 0xf98 <ADC_Channel+0x354>
     db8:	2a 81       	ldd	r18, Y+2	; 0x02
     dba:	3b 81       	ldd	r19, Y+3	; 0x03
     dbc:	2d 31       	cpi	r18, 0x1D	; 29
     dbe:	31 05       	cpc	r19, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <ADC_Channel+0x180>
     dc2:	17 c1       	rjmp	.+558    	; 0xff2 <ADC_Channel+0x3ae>
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	8d 31       	cpi	r24, 0x1D	; 29
     dca:	91 05       	cpc	r25, r1
     dcc:	0c f4       	brge	.+2      	; 0xdd0 <ADC_Channel+0x18c>
     dce:	08 c1       	rjmp	.+528    	; 0xfe0 <ADC_Channel+0x39c>
     dd0:	2a 81       	ldd	r18, Y+2	; 0x02
     dd2:	3b 81       	ldd	r19, Y+3	; 0x03
     dd4:	2e 31       	cpi	r18, 0x1E	; 30
     dd6:	31 05       	cpc	r19, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <ADC_Channel+0x198>
     dda:	14 c1       	rjmp	.+552    	; 0x1004 <ADC_Channel+0x3c0>
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	9b 81       	ldd	r25, Y+3	; 0x03
     de0:	8f 31       	cpi	r24, 0x1F	; 31
     de2:	91 05       	cpc	r25, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <ADC_Channel+0x1a4>
     de6:	17 c1       	rjmp	.+558    	; 0x1016 <ADC_Channel+0x3d2>
     de8:	1d c1       	rjmp	.+570    	; 0x1024 <ADC_Channel+0x3e0>
	{
		case ADC0:
			ADMUX=((ADMUX &0xE0)|0x00);
     dea:	a7 e2       	ldi	r26, 0x27	; 39
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e7 e2       	ldi	r30, 0x27	; 39
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 7e       	andi	r24, 0xE0	; 224
     df6:	8c 93       	st	X, r24
     df8:	15 c1       	rjmp	.+554    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC1:
			ADMUX=((ADMUX &0xE0)|0x01);
     dfa:	a7 e2       	ldi	r26, 0x27	; 39
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e7 e2       	ldi	r30, 0x27	; 39
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 7e       	andi	r24, 0xE0	; 224
     e06:	81 60       	ori	r24, 0x01	; 1
     e08:	8c 93       	st	X, r24
     e0a:	0c c1       	rjmp	.+536    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC2:
			ADMUX=((ADMUX &0xE0)|0x02);
     e0c:	a7 e2       	ldi	r26, 0x27	; 39
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e7 e2       	ldi	r30, 0x27	; 39
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 7e       	andi	r24, 0xE0	; 224
     e18:	82 60       	ori	r24, 0x02	; 2
     e1a:	8c 93       	st	X, r24
     e1c:	03 c1       	rjmp	.+518    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC3:
			ADMUX=((ADMUX &0xE0)|0x03);
     e1e:	a7 e2       	ldi	r26, 0x27	; 39
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e2       	ldi	r30, 0x27	; 39
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	80 7e       	andi	r24, 0xE0	; 224
     e2a:	83 60       	ori	r24, 0x03	; 3
     e2c:	8c 93       	st	X, r24
     e2e:	fa c0       	rjmp	.+500    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC4:
			ADMUX=((ADMUX &0xE0)|0x04);
     e30:	a7 e2       	ldi	r26, 0x27	; 39
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e7 e2       	ldi	r30, 0x27	; 39
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 7e       	andi	r24, 0xE0	; 224
     e3c:	84 60       	ori	r24, 0x04	; 4
     e3e:	8c 93       	st	X, r24
     e40:	f1 c0       	rjmp	.+482    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC5:
			ADMUX=((ADMUX &0xE0)|0x05);
     e42:	a7 e2       	ldi	r26, 0x27	; 39
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e7 e2       	ldi	r30, 0x27	; 39
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 7e       	andi	r24, 0xE0	; 224
     e4e:	85 60       	ori	r24, 0x05	; 5
     e50:	8c 93       	st	X, r24
     e52:	e8 c0       	rjmp	.+464    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC6:
			ADMUX=((ADMUX &0xE0)|0x06);
     e54:	a7 e2       	ldi	r26, 0x27	; 39
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e2       	ldi	r30, 0x27	; 39
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 7e       	andi	r24, 0xE0	; 224
     e60:	86 60       	ori	r24, 0x06	; 6
     e62:	8c 93       	st	X, r24
     e64:	df c0       	rjmp	.+446    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC7:
			ADMUX=((ADMUX &0xE0)|0x07);
     e66:	a7 e2       	ldi	r26, 0x27	; 39
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e7 e2       	ldi	r30, 0x27	; 39
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 7e       	andi	r24, 0xE0	; 224
     e72:	87 60       	ori	r24, 0x07	; 7
     e74:	8c 93       	st	X, r24
     e76:	d6 c0       	rjmp	.+428    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC0_ADC0_10:
			ADMUX=((ADMUX &0xE0)|0x08);
     e78:	a7 e2       	ldi	r26, 0x27	; 39
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e2       	ldi	r30, 0x27	; 39
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 7e       	andi	r24, 0xE0	; 224
     e84:	88 60       	ori	r24, 0x08	; 8
     e86:	8c 93       	st	X, r24
     e88:	cd c0       	rjmp	.+410    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC1_ADC0_10:
			ADMUX=((ADMUX &0xE0)|0x09);
     e8a:	a7 e2       	ldi	r26, 0x27	; 39
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e7 e2       	ldi	r30, 0x27	; 39
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 7e       	andi	r24, 0xE0	; 224
     e96:	89 60       	ori	r24, 0x09	; 9
     e98:	8c 93       	st	X, r24
     e9a:	c4 c0       	rjmp	.+392    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC0_ADC0_200:
			ADMUX=((ADMUX &0xE0)|0x0A);
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 7e       	andi	r24, 0xE0	; 224
     ea8:	8a 60       	ori	r24, 0x0A	; 10
     eaa:	8c 93       	st	X, r24
     eac:	bb c0       	rjmp	.+374    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC1_ADC0_200:
			ADMUX=((ADMUX &0xE0)|0x0B);
     eae:	a7 e2       	ldi	r26, 0x27	; 39
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e7 e2       	ldi	r30, 0x27	; 39
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 7e       	andi	r24, 0xE0	; 224
     eba:	8b 60       	ori	r24, 0x0B	; 11
     ebc:	8c 93       	st	X, r24
     ebe:	b2 c0       	rjmp	.+356    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC2_ADC2_10:
			ADMUX=((ADMUX &0xE0)|0x0C);
     ec0:	a7 e2       	ldi	r26, 0x27	; 39
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e2       	ldi	r30, 0x27	; 39
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 7e       	andi	r24, 0xE0	; 224
     ecc:	8c 60       	ori	r24, 0x0C	; 12
     ece:	8c 93       	st	X, r24
     ed0:	a9 c0       	rjmp	.+338    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC3_ADC2_10:
			ADMUX=((ADMUX &0xE0)|0x0D);
     ed2:	a7 e2       	ldi	r26, 0x27	; 39
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e7 e2       	ldi	r30, 0x27	; 39
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 7e       	andi	r24, 0xE0	; 224
     ede:	8d 60       	ori	r24, 0x0D	; 13
     ee0:	8c 93       	st	X, r24
     ee2:	a0 c0       	rjmp	.+320    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC2_ADC2_200:
			ADMUX=((ADMUX &0xE0)|0x0E);
     ee4:	a7 e2       	ldi	r26, 0x27	; 39
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 7e       	andi	r24, 0xE0	; 224
     ef0:	8e 60       	ori	r24, 0x0E	; 14
     ef2:	8c 93       	st	X, r24
     ef4:	97 c0       	rjmp	.+302    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC3_ADC2_200:
			ADMUX=((ADMUX &0xE0)|0x0F);
     ef6:	a7 e2       	ldi	r26, 0x27	; 39
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e7 e2       	ldi	r30, 0x27	; 39
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 7e       	andi	r24, 0xE0	; 224
     f02:	8f 60       	ori	r24, 0x0F	; 15
     f04:	8c 93       	st	X, r24
     f06:	8e c0       	rjmp	.+284    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC0_ADC1_1:
			ADMUX=((ADMUX &0xE0)|0x10);
     f08:	a7 e2       	ldi	r26, 0x27	; 39
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e7 e2       	ldi	r30, 0x27	; 39
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 7e       	andi	r24, 0xE0	; 224
     f14:	80 61       	ori	r24, 0x10	; 16
     f16:	8c 93       	st	X, r24
     f18:	85 c0       	rjmp	.+266    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC1_ADC1_1:
			ADMUX=((ADMUX &0xE0)|0x11);
     f1a:	a7 e2       	ldi	r26, 0x27	; 39
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e7 e2       	ldi	r30, 0x27	; 39
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 7e       	andi	r24, 0xE0	; 224
     f26:	81 61       	ori	r24, 0x11	; 17
     f28:	8c 93       	st	X, r24
     f2a:	7c c0       	rjmp	.+248    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC2_ADC1_1:
			ADMUX=((ADMUX &0xE0)|0x12);
     f2c:	a7 e2       	ldi	r26, 0x27	; 39
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e2       	ldi	r30, 0x27	; 39
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 7e       	andi	r24, 0xE0	; 224
     f38:	82 61       	ori	r24, 0x12	; 18
     f3a:	8c 93       	st	X, r24
     f3c:	73 c0       	rjmp	.+230    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC3_ADC1_1:
			ADMUX=((ADMUX &0xE0)|0x13);
     f3e:	a7 e2       	ldi	r26, 0x27	; 39
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e2       	ldi	r30, 0x27	; 39
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 7e       	andi	r24, 0xE0	; 224
     f4a:	83 61       	ori	r24, 0x13	; 19
     f4c:	8c 93       	st	X, r24
     f4e:	6a c0       	rjmp	.+212    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC4_ADC1_1:
			ADMUX=((ADMUX &0xE0)|0x14);
     f50:	a7 e2       	ldi	r26, 0x27	; 39
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e7 e2       	ldi	r30, 0x27	; 39
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 7e       	andi	r24, 0xE0	; 224
     f5c:	84 61       	ori	r24, 0x14	; 20
     f5e:	8c 93       	st	X, r24
     f60:	61 c0       	rjmp	.+194    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC5_ADC1_1:
			ADMUX=((ADMUX &0xE0)|0x15);
     f62:	a7 e2       	ldi	r26, 0x27	; 39
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 e2       	ldi	r30, 0x27	; 39
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 7e       	andi	r24, 0xE0	; 224
     f6e:	85 61       	ori	r24, 0x15	; 21
     f70:	8c 93       	st	X, r24
     f72:	58 c0       	rjmp	.+176    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC6_ADC1_1:
			ADMUX=((ADMUX &0xE0)|0x16);
     f74:	a7 e2       	ldi	r26, 0x27	; 39
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e7 e2       	ldi	r30, 0x27	; 39
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 7e       	andi	r24, 0xE0	; 224
     f80:	86 61       	ori	r24, 0x16	; 22
     f82:	8c 93       	st	X, r24
     f84:	4f c0       	rjmp	.+158    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC7_ADC1_1:
			ADMUX=((ADMUX &0xE0)|0x17);
     f86:	a7 e2       	ldi	r26, 0x27	; 39
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e7 e2       	ldi	r30, 0x27	; 39
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 7e       	andi	r24, 0xE0	; 224
     f92:	87 61       	ori	r24, 0x17	; 23
     f94:	8c 93       	st	X, r24
     f96:	46 c0       	rjmp	.+140    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC0_ADC2_1:
			ADMUX=((ADMUX &0xE0)|0x18);
     f98:	a7 e2       	ldi	r26, 0x27	; 39
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e7 e2       	ldi	r30, 0x27	; 39
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 7e       	andi	r24, 0xE0	; 224
     fa4:	88 61       	ori	r24, 0x18	; 24
     fa6:	8c 93       	st	X, r24
     fa8:	3d c0       	rjmp	.+122    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC1_ADC2_1:
			ADMUX=((ADMUX &0xE0)|0x19);
     faa:	a7 e2       	ldi	r26, 0x27	; 39
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e2       	ldi	r30, 0x27	; 39
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 7e       	andi	r24, 0xE0	; 224
     fb6:	89 61       	ori	r24, 0x19	; 25
     fb8:	8c 93       	st	X, r24
     fba:	34 c0       	rjmp	.+104    	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC2_ADC2_1:
			ADMUX=((ADMUX &0xE0)|0x1A);
     fbc:	a7 e2       	ldi	r26, 0x27	; 39
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e7 e2       	ldi	r30, 0x27	; 39
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 7e       	andi	r24, 0xE0	; 224
     fc8:	8a 61       	ori	r24, 0x1A	; 26
     fca:	8c 93       	st	X, r24
     fcc:	2b c0       	rjmp	.+86     	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC3_ADC2_1:
			ADMUX=((ADMUX &0xE0)|0x1B);
     fce:	a7 e2       	ldi	r26, 0x27	; 39
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e7 e2       	ldi	r30, 0x27	; 39
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 7e       	andi	r24, 0xE0	; 224
     fda:	8b 61       	ori	r24, 0x1B	; 27
     fdc:	8c 93       	st	X, r24
     fde:	22 c0       	rjmp	.+68     	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC4_ADC2_1:
			ADMUX=((ADMUX &0xE0)|0x1C);
     fe0:	a7 e2       	ldi	r26, 0x27	; 39
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e7 e2       	ldi	r30, 0x27	; 39
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 7e       	andi	r24, 0xE0	; 224
     fec:	8c 61       	ori	r24, 0x1C	; 28
     fee:	8c 93       	st	X, r24
     ff0:	19 c0       	rjmp	.+50     	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case ADC5_ADC2_1:
			ADMUX=((ADMUX &0xE0)|0x1D);
     ff2:	a7 e2       	ldi	r26, 0x27	; 39
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e2       	ldi	r30, 0x27	; 39
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 7e       	andi	r24, 0xE0	; 224
     ffe:	8d 61       	ori	r24, 0x1D	; 29
    1000:	8c 93       	st	X, r24
    1002:	10 c0       	rjmp	.+32     	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case _1_22:
			ADMUX=((ADMUX &0xE0)|0x1E);
    1004:	a7 e2       	ldi	r26, 0x27	; 39
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e7 e2       	ldi	r30, 0x27	; 39
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 7e       	andi	r24, 0xE0	; 224
    1010:	8e 61       	ori	r24, 0x1E	; 30
    1012:	8c 93       	st	X, r24
    1014:	07 c0       	rjmp	.+14     	; 0x1024 <ADC_Channel+0x3e0>
			break;
		case GND:
			ADMUX=((ADMUX &0xE0)|0x1F);
    1016:	a7 e2       	ldi	r26, 0x27	; 39
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e7 e2       	ldi	r30, 0x27	; 39
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 61       	ori	r24, 0x1F	; 31
    1022:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <ADC_Resolution>:
void ADC_Resolution(u8 Resolution)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
	if(Resolution==ADC_RESOLUTION_8_BIT)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	41 f4       	brne	.+16     	; 0x1052 <ADC_Resolution+0x22>
	{
		SET_BIT(ADMUX,5);
    1042:	a7 e2       	ldi	r26, 0x27	; 39
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e2       	ldi	r30, 0x27	; 39
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 62       	ori	r24, 0x20	; 32
    104e:	8c 93       	st	X, r24
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <ADC_Resolution+0x30>
	}else
	{
		CLEAR_BIT(ADMUX,5);
    1052:	a7 e2       	ldi	r26, 0x27	; 39
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e7 e2       	ldi	r30, 0x27	; 39
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8f 7d       	andi	r24, 0xDF	; 223
    105e:	8c 93       	st	X, r24
	}
}
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <ADC_Auto_Trigger_Enable>:
void ADC_Auto_Trigger_Enable(void)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,5);
    1070:	a6 e2       	ldi	r26, 0x26	; 38
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e6 e2       	ldi	r30, 0x26	; 38
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 62       	ori	r24, 0x20	; 32
    107c:	8c 93       	st	X, r24
}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <ADC_Auto_trigger_Source>:
void ADC_Auto_trigger_Source(u8 source)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	89 83       	std	Y+1, r24	; 0x01
	if(source == ADC_TRIGGER_FREE_RUNNING)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	88 23       	and	r24, r24
    1094:	b1 f4       	brne	.+44     	; 0x10c2 <ADC_Auto_trigger_Source+0x3e>
	{
		CLEAR_BIT(SFIOR,7);
    1096:	a0 e5       	ldi	r26, 0x50	; 80
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e0 e5       	ldi	r30, 0x50	; 80
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 77       	andi	r24, 0x7F	; 127
    10a2:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR,6);
    10a4:	a0 e5       	ldi	r26, 0x50	; 80
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e0 e5       	ldi	r30, 0x50	; 80
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 7b       	andi	r24, 0xBF	; 191
    10b0:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR,5);
    10b2:	a0 e5       	ldi	r26, 0x50	; 80
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e0 e5       	ldi	r30, 0x50	; 80
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8f 7d       	andi	r24, 0xDF	; 223
    10be:	8c 93       	st	X, r24
    10c0:	38 c0       	rjmp	.+112    	; 0x1132 <ADC_Auto_trigger_Source+0xae>
	}else if(source == ADC_TRIGGER_ANALOG_COMPARATOR)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	b1 f4       	brne	.+44     	; 0x10f4 <ADC_Auto_trigger_Source+0x70>
	{
		CLEAR_BIT(SFIOR,7);
    10c8:	a0 e5       	ldi	r26, 0x50	; 80
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e0 e5       	ldi	r30, 0x50	; 80
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8f 77       	andi	r24, 0x7F	; 127
    10d4:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR,6);
    10d6:	a0 e5       	ldi	r26, 0x50	; 80
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e0 e5       	ldi	r30, 0x50	; 80
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8f 7b       	andi	r24, 0xBF	; 191
    10e2:	8c 93       	st	X, r24
		SET_BIT(SFIOR,5);
    10e4:	a0 e5       	ldi	r26, 0x50	; 80
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e0 e5       	ldi	r30, 0x50	; 80
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	80 62       	ori	r24, 0x20	; 32
    10f0:	8c 93       	st	X, r24
    10f2:	1f c0       	rjmp	.+62     	; 0x1132 <ADC_Auto_trigger_Source+0xae>
	}else if(source == ADC_TRIGGER_EX_INT_0)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	e1 f4       	brne	.+56     	; 0x1132 <ADC_Auto_trigger_Source+0xae>
	{
		SET_BIT(ADCSRA,3);
    10fa:	a6 e2       	ldi	r26, 0x26	; 38
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e6 e2       	ldi	r30, 0x26	; 38
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	88 60       	ori	r24, 0x08	; 8
    1106:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR,5);
    1108:	a0 e5       	ldi	r26, 0x50	; 80
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e0 e5       	ldi	r30, 0x50	; 80
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8f 7d       	andi	r24, 0xDF	; 223
    1114:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR,7);
    1116:	a0 e5       	ldi	r26, 0x50	; 80
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e0 e5       	ldi	r30, 0x50	; 80
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 77       	andi	r24, 0x7F	; 127
    1122:	8c 93       	st	X, r24
		SET_BIT(SFIOR,6);
    1124:	a0 e5       	ldi	r26, 0x50	; 80
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e0 e5       	ldi	r30, 0x50	; 80
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	8c 93       	st	X, r24
	}
}
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <ADC_Read_Anaglog_Value>:

u16	ADC_Read_Anaglog_Value(u8 Vref)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	29 97       	sbiw	r28, 0x09	; 9
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	8f 83       	std	Y+7, r24	; 0x07
	u8 ADCH_temp=0,ADCL_temp=0;
    1150:	1e 82       	std	Y+6, r1	; 0x06
    1152:	1d 82       	std	Y+5, r1	; 0x05
	u16 ADC_digital_value=0;
    1154:	1c 82       	std	Y+4, r1	; 0x04
    1156:	1b 82       	std	Y+3, r1	; 0x03
	int Analog_Value=0;
    1158:	1a 82       	std	Y+2, r1	; 0x02
    115a:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(ADMUX,5)== 0)
    115c:	e7 e2       	ldi	r30, 0x27	; 39
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	82 95       	swap	r24
    1164:	86 95       	lsr	r24
    1166:	87 70       	andi	r24, 0x07	; 7
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	90 70       	andi	r25, 0x00	; 0
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	49 f5       	brne	.+82     	; 0x11c6 <ADC_Read_Anaglog_Value+0x8c>
	{
		// 10 bit resolution
		ADCL_temp=ADCL;
    1174:	e4 e2       	ldi	r30, 0x24	; 36
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8d 83       	std	Y+5, r24	; 0x05
		ADCH_temp=ADCH&0x03;
    117c:	e5 e2       	ldi	r30, 0x25	; 37
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	83 70       	andi	r24, 0x03	; 3
    1184:	8e 83       	std	Y+6, r24	; 0x06
		ADC_digital_value=(ADCL_temp | (ADCH_temp<<8));
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	98 2f       	mov	r25, r24
    1194:	88 27       	eor	r24, r24
    1196:	82 2b       	or	r24, r18
    1198:	93 2b       	or	r25, r19
    119a:	9c 83       	std	Y+4, r25	; 0x04
    119c:	8b 83       	std	Y+3, r24	; 0x03
		Analog_Value=((ADC_digital_value*Vref)/1024);
    119e:	8f 81       	ldd	r24, Y+7	; 0x07
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	ac 01       	movw	r20, r24
    11aa:	24 9f       	mul	r18, r20
    11ac:	c0 01       	movw	r24, r0
    11ae:	25 9f       	mul	r18, r21
    11b0:	90 0d       	add	r25, r0
    11b2:	34 9f       	mul	r19, r20
    11b4:	90 0d       	add	r25, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	89 2f       	mov	r24, r25
    11ba:	99 27       	eor	r25, r25
    11bc:	86 95       	lsr	r24
    11be:	86 95       	lsr	r24
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	26 c0       	rjmp	.+76     	; 0x1212 <ADC_Read_Anaglog_Value+0xd8>
	}else
	{
		//8bit resolution
		ADCH_temp=ADCH;
    11c6:	e5 e2       	ldi	r30, 0x25	; 37
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8e 83       	std	Y+6, r24	; 0x06
		Analog_Value=(ADCH_temp*Vref)/256;
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	8f 81       	ldd	r24, Y+7	; 0x07
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	ac 01       	movw	r20, r24
    11dc:	24 9f       	mul	r18, r20
    11de:	c0 01       	movw	r24, r0
    11e0:	25 9f       	mul	r18, r21
    11e2:	90 0d       	add	r25, r0
    11e4:	34 9f       	mul	r19, r20
    11e6:	90 0d       	add	r25, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	99 87       	std	Y+9, r25	; 0x09
    11ec:	88 87       	std	Y+8, r24	; 0x08
    11ee:	88 85       	ldd	r24, Y+8	; 0x08
    11f0:	99 85       	ldd	r25, Y+9	; 0x09
    11f2:	99 23       	and	r25, r25
    11f4:	34 f4       	brge	.+12     	; 0x1202 <ADC_Read_Anaglog_Value+0xc8>
    11f6:	28 85       	ldd	r18, Y+8	; 0x08
    11f8:	39 85       	ldd	r19, Y+9	; 0x09
    11fa:	21 50       	subi	r18, 0x01	; 1
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	39 87       	std	Y+9, r19	; 0x09
    1200:	28 87       	std	Y+8, r18	; 0x08
    1202:	48 85       	ldd	r20, Y+8	; 0x08
    1204:	59 85       	ldd	r21, Y+9	; 0x09
    1206:	85 2f       	mov	r24, r21
    1208:	99 27       	eor	r25, r25
    120a:	87 fd       	sbrc	r24, 7
    120c:	9a 95       	dec	r25
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
	}
	//SET_BIT(ADCSRA,4);
	return Analog_Value;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1216:	29 96       	adiw	r28, 0x09	; 9
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <ADC_Clock_Prescaler>:
void ADC_Clock_Prescaler(u8 Prescaler)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <ADC_Clock_Prescaler+0x6>
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
	switch (Prescaler)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3b 83       	std	Y+3, r19	; 0x03
    123e:	2a 83       	std	Y+2, r18	; 0x02
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	9b 81       	ldd	r25, Y+3	; 0x03
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <ADC_Clock_Prescaler+0x24>
    124a:	3f c0       	rjmp	.+126    	; 0x12ca <ADC_Clock_Prescaler+0xa2>
    124c:	2a 81       	ldd	r18, Y+2	; 0x02
    124e:	3b 81       	ldd	r19, Y+3	; 0x03
    1250:	24 30       	cpi	r18, 0x04	; 4
    1252:	31 05       	cpc	r19, r1
    1254:	7c f4       	brge	.+30     	; 0x1274 <ADC_Clock_Prescaler+0x4c>
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	19 f1       	breq	.+70     	; 0x12a6 <ADC_Clock_Prescaler+0x7e>
    1260:	2a 81       	ldd	r18, Y+2	; 0x02
    1262:	3b 81       	ldd	r19, Y+3	; 0x03
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	3c f5       	brge	.+78     	; 0x12b8 <ADC_Clock_Prescaler+0x90>
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	9b 81       	ldd	r25, Y+3	; 0x03
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	89 f0       	breq	.+34     	; 0x1294 <ADC_Clock_Prescaler+0x6c>
    1272:	4d c0       	rjmp	.+154    	; 0x130e <ADC_Clock_Prescaler+0xe6>
    1274:	2a 81       	ldd	r18, Y+2	; 0x02
    1276:	3b 81       	ldd	r19, Y+3	; 0x03
    1278:	25 30       	cpi	r18, 0x05	; 5
    127a:	31 05       	cpc	r19, r1
    127c:	c1 f1       	breq	.+112    	; 0x12ee <ADC_Clock_Prescaler+0xc6>
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	85 30       	cpi	r24, 0x05	; 5
    1284:	91 05       	cpc	r25, r1
    1286:	54 f1       	brlt	.+84     	; 0x12dc <ADC_Clock_Prescaler+0xb4>
    1288:	2a 81       	ldd	r18, Y+2	; 0x02
    128a:	3b 81       	ldd	r19, Y+3	; 0x03
    128c:	26 30       	cpi	r18, 0x06	; 6
    128e:	31 05       	cpc	r19, r1
    1290:	b9 f1       	breq	.+110    	; 0x1300 <ADC_Clock_Prescaler+0xd8>
    1292:	3d c0       	rjmp	.+122    	; 0x130e <ADC_Clock_Prescaler+0xe6>
	{
		case ADC_PRESCALER_2:
				ADCSRA=((ADCSRA&0xF8)|0x01);
    1294:	a6 e2       	ldi	r26, 0x26	; 38
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e6 e2       	ldi	r30, 0x26	; 38
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	88 7f       	andi	r24, 0xF8	; 248
    12a0:	81 60       	ori	r24, 0x01	; 1
    12a2:	8c 93       	st	X, r24
    12a4:	34 c0       	rjmp	.+104    	; 0x130e <ADC_Clock_Prescaler+0xe6>
				break;
		case ADC_PRESCALER_4:
				ADCSRA=((ADCSRA&0xF8)|0x02);
    12a6:	a6 e2       	ldi	r26, 0x26	; 38
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e6 e2       	ldi	r30, 0x26	; 38
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 7f       	andi	r24, 0xF8	; 248
    12b2:	82 60       	ori	r24, 0x02	; 2
    12b4:	8c 93       	st	X, r24
    12b6:	2b c0       	rjmp	.+86     	; 0x130e <ADC_Clock_Prescaler+0xe6>
				break;
		case ADC_PRESCALER_8:
				ADCSRA=((ADCSRA&0xF8)|0x03);
    12b8:	a6 e2       	ldi	r26, 0x26	; 38
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e6 e2       	ldi	r30, 0x26	; 38
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	88 7f       	andi	r24, 0xF8	; 248
    12c4:	83 60       	ori	r24, 0x03	; 3
    12c6:	8c 93       	st	X, r24
    12c8:	22 c0       	rjmp	.+68     	; 0x130e <ADC_Clock_Prescaler+0xe6>
				break;
		case ADC_PRESCALER_16:
				ADCSRA=((ADCSRA&0xF8)|0x04);
    12ca:	a6 e2       	ldi	r26, 0x26	; 38
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e6 e2       	ldi	r30, 0x26	; 38
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	84 60       	ori	r24, 0x04	; 4
    12d8:	8c 93       	st	X, r24
    12da:	19 c0       	rjmp	.+50     	; 0x130e <ADC_Clock_Prescaler+0xe6>
				break;
		case ADC_PRESCALER_32:
				ADCSRA=((ADCSRA&0xF8)|0x05);
    12dc:	a6 e2       	ldi	r26, 0x26	; 38
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e6 e2       	ldi	r30, 0x26	; 38
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 7f       	andi	r24, 0xF8	; 248
    12e8:	85 60       	ori	r24, 0x05	; 5
    12ea:	8c 93       	st	X, r24
    12ec:	10 c0       	rjmp	.+32     	; 0x130e <ADC_Clock_Prescaler+0xe6>
				break;
		case ADC_PRESCALER_64:
				ADCSRA=((ADCSRA&0xF8)|0x06);
    12ee:	a6 e2       	ldi	r26, 0x26	; 38
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e6 e2       	ldi	r30, 0x26	; 38
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	88 7f       	andi	r24, 0xF8	; 248
    12fa:	86 60       	ori	r24, 0x06	; 6
    12fc:	8c 93       	st	X, r24
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <ADC_Clock_Prescaler+0xe6>
				break;
		case ADC_PRESCALER_128:
				ADCSRA=((ADCSRA&0xF8)|0x07);
    1300:	a6 e2       	ldi	r26, 0x26	; 38
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e6 e2       	ldi	r30, 0x26	; 38
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	87 60       	ori	r24, 0x07	; 7
    130c:	8c 93       	st	X, r24
				break;
	}
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <LCD_Vid_SendCommand>:
 |        PC1|---------------->|RW        |
 |        PC0|---------------->|RS        |
 -----------                   ----------
 */
void LCD_Vid_SendCommand(unsigned char command)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	6d 97       	sbiw	r28, 0x1d	; 29
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	8d 8f       	std	Y+29, r24	; 0x1d
DIO_SetPinValue(PORTCONTROL,RS,LOW);
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTCONTROL,RW,LOW);
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	62 e0       	ldi	r22, 0x02	; 2
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b0 e4       	ldi	r27, 0x40	; 64
    1356:	89 8f       	std	Y+25, r24	; 0x19
    1358:	9a 8f       	std	Y+26, r25	; 0x1a
    135a:	ab 8f       	std	Y+27, r26	; 0x1b
    135c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135e:	69 8d       	ldd	r22, Y+25	; 0x19
    1360:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4a ef       	ldi	r20, 0xFA	; 250
    136c:	54 e4       	ldi	r21, 0x44	; 68
    136e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	8d 8b       	std	Y+21, r24	; 0x15
    1378:	9e 8b       	std	Y+22, r25	; 0x16
    137a:	af 8b       	std	Y+23, r26	; 0x17
    137c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    137e:	6d 89       	ldd	r22, Y+21	; 0x15
    1380:	7e 89       	ldd	r23, Y+22	; 0x16
    1382:	8f 89       	ldd	r24, Y+23	; 0x17
    1384:	98 8d       	ldd	r25, Y+24	; 0x18
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e8       	ldi	r20, 0x80	; 128
    138c:	5f e3       	ldi	r21, 0x3F	; 63
    138e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1392:	88 23       	and	r24, r24
    1394:	2c f4       	brge	.+10     	; 0x13a0 <LCD_Vid_SendCommand+0x86>
		__ticks = 1;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9c 8b       	std	Y+20, r25	; 0x14
    139c:	8b 8b       	std	Y+19, r24	; 0x13
    139e:	3f c0       	rjmp	.+126    	; 0x141e <LCD_Vid_SendCommand+0x104>
	else if (__tmp > 65535)
    13a0:	6d 89       	ldd	r22, Y+21	; 0x15
    13a2:	7e 89       	ldd	r23, Y+22	; 0x16
    13a4:	8f 89       	ldd	r24, Y+23	; 0x17
    13a6:	98 8d       	ldd	r25, Y+24	; 0x18
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	3f ef       	ldi	r19, 0xFF	; 255
    13ac:	4f e7       	ldi	r20, 0x7F	; 127
    13ae:	57 e4       	ldi	r21, 0x47	; 71
    13b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13b4:	18 16       	cp	r1, r24
    13b6:	4c f5       	brge	.+82     	; 0x140a <LCD_Vid_SendCommand+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b8:	69 8d       	ldd	r22, Y+25	; 0x19
    13ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e2       	ldi	r20, 0x20	; 32
    13c6:	51 e4       	ldi	r21, 0x41	; 65
    13c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9c 8b       	std	Y+20, r25	; 0x14
    13de:	8b 8b       	std	Y+19, r24	; 0x13
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <LCD_Vid_SendCommand+0xe6>
    13e2:	88 ec       	ldi	r24, 0xC8	; 200
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9a 8b       	std	Y+18, r25	; 0x12
    13e8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ea:	89 89       	ldd	r24, Y+17	; 0x11
    13ec:	9a 89       	ldd	r25, Y+18	; 0x12
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <LCD_Vid_SendCommand+0xd4>
    13f2:	9a 8b       	std	Y+18, r25	; 0x12
    13f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f6:	8b 89       	ldd	r24, Y+19	; 0x13
    13f8:	9c 89       	ldd	r25, Y+20	; 0x14
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	9c 8b       	std	Y+20, r25	; 0x14
    13fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1400:	8b 89       	ldd	r24, Y+19	; 0x13
    1402:	9c 89       	ldd	r25, Y+20	; 0x14
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	69 f7       	brne	.-38     	; 0x13e2 <LCD_Vid_SendCommand+0xc8>
    1408:	14 c0       	rjmp	.+40     	; 0x1432 <LCD_Vid_SendCommand+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140a:	6d 89       	ldd	r22, Y+21	; 0x15
    140c:	7e 89       	ldd	r23, Y+22	; 0x16
    140e:	8f 89       	ldd	r24, Y+23	; 0x17
    1410:	98 8d       	ldd	r25, Y+24	; 0x18
    1412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	9c 8b       	std	Y+20, r25	; 0x14
    141c:	8b 8b       	std	Y+19, r24	; 0x13
    141e:	8b 89       	ldd	r24, Y+19	; 0x13
    1420:	9c 89       	ldd	r25, Y+20	; 0x14
    1422:	98 8b       	std	Y+16, r25	; 0x10
    1424:	8f 87       	std	Y+15, r24	; 0x0f
    1426:	8f 85       	ldd	r24, Y+15	; 0x0f
    1428:	98 89       	ldd	r25, Y+16	; 0x10
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <LCD_Vid_SendCommand+0x110>
    142e:	98 8b       	std	Y+16, r25	; 0x10
    1430:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
DIO_SetPortValue(PORTDATA,command);
    1432:	83 e0       	ldi	r24, 0x03	; 3
    1434:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1436:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>
DIO_SetPinValue(PORTCONTROL,E,LOW);
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	62 e0       	ldi	r22, 0x02	; 2
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a0 e0       	ldi	r26, 0x00	; 0
    144a:	b0 e4       	ldi	r27, 0x40	; 64
    144c:	8b 87       	std	Y+11, r24	; 0x0b
    144e:	9c 87       	std	Y+12, r25	; 0x0c
    1450:	ad 87       	std	Y+13, r26	; 0x0d
    1452:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1454:	6b 85       	ldd	r22, Y+11	; 0x0b
    1456:	7c 85       	ldd	r23, Y+12	; 0x0c
    1458:	8d 85       	ldd	r24, Y+13	; 0x0d
    145a:	9e 85       	ldd	r25, Y+14	; 0x0e
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	4a ef       	ldi	r20, 0xFA	; 250
    1462:	54 e4       	ldi	r21, 0x44	; 68
    1464:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	8f 83       	std	Y+7, r24	; 0x07
    146e:	98 87       	std	Y+8, r25	; 0x08
    1470:	a9 87       	std	Y+9, r26	; 0x09
    1472:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	2c f4       	brge	.+10     	; 0x1496 <LCD_Vid_SendCommand+0x17c>
		__ticks = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	3f c0       	rjmp	.+126    	; 0x1514 <LCD_Vid_SendCommand+0x1fa>
	else if (__tmp > 65535)
    1496:	6f 81       	ldd	r22, Y+7	; 0x07
    1498:	78 85       	ldd	r23, Y+8	; 0x08
    149a:	89 85       	ldd	r24, Y+9	; 0x09
    149c:	9a 85       	ldd	r25, Y+10	; 0x0a
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	3f ef       	ldi	r19, 0xFF	; 255
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	57 e4       	ldi	r21, 0x47	; 71
    14a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	4c f5       	brge	.+82     	; 0x1500 <LCD_Vid_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e2       	ldi	r20, 0x20	; 32
    14bc:	51 e4       	ldi	r21, 0x41	; 65
    14be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <LCD_Vid_SendCommand+0x1dc>
    14d8:	88 ec       	ldi	r24, 0xC8	; 200
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <LCD_Vid_SendCommand+0x1ca>
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	69 f7       	brne	.-38     	; 0x14d8 <LCD_Vid_SendCommand+0x1be>
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <LCD_Vid_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1500:	6f 81       	ldd	r22, Y+7	; 0x07
    1502:	78 85       	ldd	r23, Y+8	; 0x08
    1504:	89 85       	ldd	r24, Y+9	; 0x09
    1506:	9a 85       	ldd	r25, Y+10	; 0x0a
    1508:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <LCD_Vid_SendCommand+0x206>
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	62 e0       	ldi	r22, 0x02	; 2
    152c:	41 e0       	ldi	r20, 0x01	; 1
    152e:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
}
    1532:	6d 96       	adiw	r28, 0x1d	; 29
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <LCD_Vid_SendChar>:

void LCD_Vid_SendChar(unsigned char Data)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	2f 97       	sbiw	r28, 0x0f	; 15
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPinValue(PORTCONTROL,RS,HIGH);
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,RW,LOW);
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	DIO_SetPortValue(PORTDATA,Data);
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	6f 85       	ldd	r22, Y+15	; 0x0f
    157c:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>
	DIO_SetPinValue(PORTCONTROL,E,LOW);
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	62 e0       	ldi	r22, 0x02	; 2
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e4       	ldi	r27, 0x40	; 64
    1592:	8b 87       	std	Y+11, r24	; 0x0b
    1594:	9c 87       	std	Y+12, r25	; 0x0c
    1596:	ad 87       	std	Y+13, r26	; 0x0d
    1598:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159a:	6b 85       	ldd	r22, Y+11	; 0x0b
    159c:	7c 85       	ldd	r23, Y+12	; 0x0c
    159e:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	4a ef       	ldi	r20, 0xFA	; 250
    15a8:	54 e4       	ldi	r21, 0x44	; 68
    15aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	8f 83       	std	Y+7, r24	; 0x07
    15b4:	98 87       	std	Y+8, r25	; 0x08
    15b6:	a9 87       	std	Y+9, r26	; 0x09
    15b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e8       	ldi	r20, 0x80	; 128
    15c8:	5f e3       	ldi	r21, 0x3F	; 63
    15ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15ce:	88 23       	and	r24, r24
    15d0:	2c f4       	brge	.+10     	; 0x15dc <LCD_Vid_SendChar+0x98>
		__ticks = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	3f c0       	rjmp	.+126    	; 0x165a <LCD_Vid_SendChar+0x116>
	else if (__tmp > 65535)
    15dc:	6f 81       	ldd	r22, Y+7	; 0x07
    15de:	78 85       	ldd	r23, Y+8	; 0x08
    15e0:	89 85       	ldd	r24, Y+9	; 0x09
    15e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	3f ef       	ldi	r19, 0xFF	; 255
    15e8:	4f e7       	ldi	r20, 0x7F	; 127
    15ea:	57 e4       	ldi	r21, 0x47	; 71
    15ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15f0:	18 16       	cp	r1, r24
    15f2:	4c f5       	brge	.+82     	; 0x1646 <LCD_Vid_SendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e2       	ldi	r20, 0x20	; 32
    1602:	51 e4       	ldi	r21, 0x41	; 65
    1604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9e 83       	std	Y+6, r25	; 0x06
    161a:	8d 83       	std	Y+5, r24	; 0x05
    161c:	0f c0       	rjmp	.+30     	; 0x163c <LCD_Vid_SendChar+0xf8>
    161e:	88 ec       	ldi	r24, 0xC8	; 200
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9c 83       	std	Y+4, r25	; 0x04
    1624:	8b 83       	std	Y+3, r24	; 0x03
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <LCD_Vid_SendChar+0xe6>
    162e:	9c 83       	std	Y+4, r25	; 0x04
    1630:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	9e 83       	std	Y+6, r25	; 0x06
    163a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	69 f7       	brne	.-38     	; 0x161e <LCD_Vid_SendChar+0xda>
    1644:	14 c0       	rjmp	.+40     	; 0x166e <LCD_Vid_SendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 83       	std	Y+5, r24	; 0x05
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <LCD_Vid_SendChar+0x122>
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>


}
    1678:	2f 96       	adiw	r28, 0x0f	; 15
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <LCD_Vid_8BitInit>:
void LCD_Vid_8BitInit(void)
{DIO_SetBinDirection(PORTCONTROL,RS,output);
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	e8 97       	sbiw	r28, 0x38	; 56
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetBinDirection(PORTCONTROL,RW,output);
    16a8:	82 e0       	ldi	r24, 0x02	; 2
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetBinDirection(PORTCONTROL,E,output);
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	62 e0       	ldi	r22, 0x02	; 2
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetPortdirection(PORTDATA,output);
    16bc:	83 e0       	ldi	r24, 0x03	; 3
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	0e 94 4d 18 	call	0x309a	; 0x309a <DIO_SetPortdirection>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a0 ef       	ldi	r26, 0xF0	; 240
    16ca:	b1 e4       	ldi	r27, 0x41	; 65
    16cc:	8d ab       	std	Y+53, r24	; 0x35
    16ce:	9e ab       	std	Y+54, r25	; 0x36
    16d0:	af ab       	std	Y+55, r26	; 0x37
    16d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d4:	6d a9       	ldd	r22, Y+53	; 0x35
    16d6:	7e a9       	ldd	r23, Y+54	; 0x36
    16d8:	8f a9       	ldd	r24, Y+55	; 0x37
    16da:	98 ad       	ldd	r25, Y+56	; 0x38
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4a ef       	ldi	r20, 0xFA	; 250
    16e2:	54 e4       	ldi	r21, 0x44	; 68
    16e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	89 ab       	std	Y+49, r24	; 0x31
    16ee:	9a ab       	std	Y+50, r25	; 0x32
    16f0:	ab ab       	std	Y+51, r26	; 0x33
    16f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16f4:	69 a9       	ldd	r22, Y+49	; 0x31
    16f6:	7a a9       	ldd	r23, Y+50	; 0x32
    16f8:	8b a9       	ldd	r24, Y+51	; 0x33
    16fa:	9c a9       	ldd	r25, Y+52	; 0x34
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1708:	88 23       	and	r24, r24
    170a:	2c f4       	brge	.+10     	; 0x1716 <LCD_Vid_8BitInit+0x8c>
		__ticks = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	98 ab       	std	Y+48, r25	; 0x30
    1712:	8f a7       	std	Y+47, r24	; 0x2f
    1714:	3f c0       	rjmp	.+126    	; 0x1794 <LCD_Vid_8BitInit+0x10a>
	else if (__tmp > 65535)
    1716:	69 a9       	ldd	r22, Y+49	; 0x31
    1718:	7a a9       	ldd	r23, Y+50	; 0x32
    171a:	8b a9       	ldd	r24, Y+51	; 0x33
    171c:	9c a9       	ldd	r25, Y+52	; 0x34
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	4f e7       	ldi	r20, 0x7F	; 127
    1724:	57 e4       	ldi	r21, 0x47	; 71
    1726:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    172a:	18 16       	cp	r1, r24
    172c:	4c f5       	brge	.+82     	; 0x1780 <LCD_Vid_8BitInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172e:	6d a9       	ldd	r22, Y+53	; 0x35
    1730:	7e a9       	ldd	r23, Y+54	; 0x36
    1732:	8f a9       	ldd	r24, Y+55	; 0x37
    1734:	98 ad       	ldd	r25, Y+56	; 0x38
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e2       	ldi	r20, 0x20	; 32
    173c:	51 e4       	ldi	r21, 0x41	; 65
    173e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	98 ab       	std	Y+48, r25	; 0x30
    1754:	8f a7       	std	Y+47, r24	; 0x2f
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <LCD_Vid_8BitInit+0xec>
    1758:	88 ec       	ldi	r24, 0xC8	; 200
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9e a7       	std	Y+46, r25	; 0x2e
    175e:	8d a7       	std	Y+45, r24	; 0x2d
    1760:	8d a5       	ldd	r24, Y+45	; 0x2d
    1762:	9e a5       	ldd	r25, Y+46	; 0x2e
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCD_Vid_8BitInit+0xda>
    1768:	9e a7       	std	Y+46, r25	; 0x2e
    176a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176c:	8f a5       	ldd	r24, Y+47	; 0x2f
    176e:	98 a9       	ldd	r25, Y+48	; 0x30
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	98 ab       	std	Y+48, r25	; 0x30
    1774:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1776:	8f a5       	ldd	r24, Y+47	; 0x2f
    1778:	98 a9       	ldd	r25, Y+48	; 0x30
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	69 f7       	brne	.-38     	; 0x1758 <LCD_Vid_8BitInit+0xce>
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <LCD_Vid_8BitInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1780:	69 a9       	ldd	r22, Y+49	; 0x31
    1782:	7a a9       	ldd	r23, Y+50	; 0x32
    1784:	8b a9       	ldd	r24, Y+51	; 0x33
    1786:	9c a9       	ldd	r25, Y+52	; 0x34
    1788:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	98 ab       	std	Y+48, r25	; 0x30
    1792:	8f a7       	std	Y+47, r24	; 0x2f
    1794:	8f a5       	ldd	r24, Y+47	; 0x2f
    1796:	98 a9       	ldd	r25, Y+48	; 0x30
    1798:	9c a7       	std	Y+44, r25	; 0x2c
    179a:	8b a7       	std	Y+43, r24	; 0x2b
    179c:	8b a5       	ldd	r24, Y+43	; 0x2b
    179e:	9c a5       	ldd	r25, Y+44	; 0x2c
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <LCD_Vid_8BitInit+0x116>
    17a4:	9c a7       	std	Y+44, r25	; 0x2c
    17a6:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(30);
LCD_Vid_SendCommand(FunctionSet_8Bit);
    17a8:	88 e3       	ldi	r24, 0x38	; 56
    17aa:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_Vid_SendCommand>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e0       	ldi	r26, 0x00	; 0
    17b4:	b0 e4       	ldi	r27, 0x40	; 64
    17b6:	8f a3       	std	Y+39, r24	; 0x27
    17b8:	98 a7       	std	Y+40, r25	; 0x28
    17ba:	a9 a7       	std	Y+41, r26	; 0x29
    17bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	6f a1       	ldd	r22, Y+39	; 0x27
    17c0:	78 a5       	ldd	r23, Y+40	; 0x28
    17c2:	89 a5       	ldd	r24, Y+41	; 0x29
    17c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a ef       	ldi	r20, 0xFA	; 250
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8b a3       	std	Y+35, r24	; 0x23
    17d8:	9c a3       	std	Y+36, r25	; 0x24
    17da:	ad a3       	std	Y+37, r26	; 0x25
    17dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <LCD_Vid_8BitInit+0x176>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9a a3       	std	Y+34, r25	; 0x22
    17fc:	89 a3       	std	Y+33, r24	; 0x21
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <LCD_Vid_8BitInit+0x1f4>
	else if (__tmp > 65535)
    1800:	6b a1       	ldd	r22, Y+35	; 0x23
    1802:	7c a1       	ldd	r23, Y+36	; 0x24
    1804:	8d a1       	ldd	r24, Y+37	; 0x25
    1806:	9e a1       	ldd	r25, Y+38	; 0x26
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <LCD_Vid_8BitInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	6f a1       	ldd	r22, Y+39	; 0x27
    181a:	78 a5       	ldd	r23, Y+40	; 0x28
    181c:	89 a5       	ldd	r24, Y+41	; 0x29
    181e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <LCD_Vid_8BitInit+0x1d6>
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	98 a3       	std	Y+32, r25	; 0x20
    1848:	8f 8f       	std	Y+31, r24	; 0x1f
    184a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    184c:	98 a1       	ldd	r25, Y+32	; 0x20
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_Vid_8BitInit+0x1c4>
    1852:	98 a3       	std	Y+32, r25	; 0x20
    1854:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	89 a1       	ldd	r24, Y+33	; 0x21
    1858:	9a a1       	ldd	r25, Y+34	; 0x22
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9a a3       	std	Y+34, r25	; 0x22
    185e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	89 a1       	ldd	r24, Y+33	; 0x21
    1862:	9a a1       	ldd	r25, Y+34	; 0x22
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <LCD_Vid_8BitInit+0x1b8>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <LCD_Vid_8BitInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6b a1       	ldd	r22, Y+35	; 0x23
    186c:	7c a1       	ldd	r23, Y+36	; 0x24
    186e:	8d a1       	ldd	r24, Y+37	; 0x25
    1870:	9e a1       	ldd	r25, Y+38	; 0x26
    1872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	89 a1       	ldd	r24, Y+33	; 0x21
    1880:	9a a1       	ldd	r25, Y+34	; 0x22
    1882:	9e 8f       	std	Y+30, r25	; 0x1e
    1884:	8d 8f       	std	Y+29, r24	; 0x1d
    1886:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1888:	9e 8d       	ldd	r25, Y+30	; 0x1e
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_Vid_8BitInit+0x200>
    188e:	9e 8f       	std	Y+30, r25	; 0x1e
    1890:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2);
LCD_Vid_SendCommand(DisplayON);
    1892:	8e e0       	ldi	r24, 0x0E	; 14
    1894:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_Vid_SendCommand>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e0       	ldi	r26, 0x00	; 0
    189e:	b0 e4       	ldi	r27, 0x40	; 64
    18a0:	89 8f       	std	Y+25, r24	; 0x19
    18a2:	9a 8f       	std	Y+26, r25	; 0x1a
    18a4:	ab 8f       	std	Y+27, r26	; 0x1b
    18a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	69 8d       	ldd	r22, Y+25	; 0x19
    18aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a ef       	ldi	r20, 0xFA	; 250
    18b6:	54 e4       	ldi	r21, 0x44	; 68
    18b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8d 8b       	std	Y+21, r24	; 0x15
    18c2:	9e 8b       	std	Y+22, r25	; 0x16
    18c4:	af 8b       	std	Y+23, r26	; 0x17
    18c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ca:	7e 89       	ldd	r23, Y+22	; 0x16
    18cc:	8f 89       	ldd	r24, Y+23	; 0x17
    18ce:	98 8d       	ldd	r25, Y+24	; 0x18
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <LCD_Vid_8BitInit+0x260>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 8b       	std	Y+20, r25	; 0x14
    18e6:	8b 8b       	std	Y+19, r24	; 0x13
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <LCD_Vid_8BitInit+0x2de>
	else if (__tmp > 65535)
    18ea:	6d 89       	ldd	r22, Y+21	; 0x15
    18ec:	7e 89       	ldd	r23, Y+22	; 0x16
    18ee:	8f 89       	ldd	r24, Y+23	; 0x17
    18f0:	98 8d       	ldd	r25, Y+24	; 0x18
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <LCD_Vid_8BitInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	69 8d       	ldd	r22, Y+25	; 0x19
    1904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9c 8b       	std	Y+20, r25	; 0x14
    1928:	8b 8b       	std	Y+19, r24	; 0x13
    192a:	0f c0       	rjmp	.+30     	; 0x194a <LCD_Vid_8BitInit+0x2c0>
    192c:	88 ec       	ldi	r24, 0xC8	; 200
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9a 8b       	std	Y+18, r25	; 0x12
    1932:	89 8b       	std	Y+17, r24	; 0x11
    1934:	89 89       	ldd	r24, Y+17	; 0x11
    1936:	9a 89       	ldd	r25, Y+18	; 0x12
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_Vid_8BitInit+0x2ae>
    193c:	9a 8b       	std	Y+18, r25	; 0x12
    193e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	9c 89       	ldd	r25, Y+20	; 0x14
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <LCD_Vid_8BitInit+0x2a2>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <LCD_Vid_8BitInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6d 89       	ldd	r22, Y+21	; 0x15
    1956:	7e 89       	ldd	r23, Y+22	; 0x16
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9c 8b       	std	Y+20, r25	; 0x14
    1966:	8b 8b       	std	Y+19, r24	; 0x13
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	98 8b       	std	Y+16, r25	; 0x10
    196e:	8f 87       	std	Y+15, r24	; 0x0f
    1970:	8f 85       	ldd	r24, Y+15	; 0x0f
    1972:	98 89       	ldd	r25, Y+16	; 0x10
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_Vid_8BitInit+0x2ea>
    1978:	98 8b       	std	Y+16, r25	; 0x10
    197a:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
LCD_Vid_SendCommand(DisplayClear);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_Vid_SendCommand>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e0       	ldi	r26, 0x00	; 0
    1988:	b0 e4       	ldi	r27, 0x40	; 64
    198a:	8b 87       	std	Y+11, r24	; 0x0b
    198c:	9c 87       	std	Y+12, r25	; 0x0c
    198e:	ad 87       	std	Y+13, r26	; 0x0d
    1990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6b 85       	ldd	r22, Y+11	; 0x0b
    1994:	7c 85       	ldd	r23, Y+12	; 0x0c
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a ef       	ldi	r20, 0xFA	; 250
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8f 83       	std	Y+7, r24	; 0x07
    19ac:	98 87       	std	Y+8, r25	; 0x08
    19ae:	a9 87       	std	Y+9, r26	; 0x09
    19b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <LCD_Vid_8BitInit+0x34a>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <LCD_Vid_8BitInit+0x3c8>
	else if (__tmp > 65535)
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <LCD_Vid_8BitInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <LCD_Vid_8BitInit+0x3aa>
    1a16:	88 ec       	ldi	r24, 0xC8	; 200
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_Vid_8BitInit+0x398>
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <LCD_Vid_8BitInit+0x38c>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <LCD_Vid_8BitInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_Vid_8BitInit+0x3d4>
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
LCD_Vid_SendCommand(EntryModeSet);
    1a66:	86 e0       	ldi	r24, 0x06	; 6
    1a68:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_Vid_SendCommand>
}
    1a6c:	e8 96       	adiw	r28, 0x38	; 56
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <LCD_Vid_SendCommand4Bit_test>:
void LCD_Vid_SendCommand4Bit_test(unsigned char command)
{int x;
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	c7 55       	subi	r28, 0x57	; 87
    1a8c:	d0 40       	sbci	r29, 0x00	; 0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e9 5a       	subi	r30, 0xA9	; 169
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 83       	st	Z, r24
DIO_SetPinValue(PORTCONTROL,RS,LOW);
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTCONTROL,RW,LOW);
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
//x=command>>4;
//x=x&0x0f;
x=command;
    1ab4:	de 01       	movw	r26, r28
    1ab6:	ab 5a       	subi	r26, 0xAB	; 171
    1ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aba:	fe 01       	movw	r30, r28
    1abc:	e9 5a       	subi	r30, 0xA9	; 169
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	8d 93       	st	X+, r24
    1ac8:	9c 93       	st	X, r25
x=x&0xf0;
    1aca:	de 01       	movw	r26, r28
    1acc:	ab 5a       	subi	r26, 0xAB	; 171
    1ace:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	eb 5a       	subi	r30, 0xAB	; 171
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	80 7f       	andi	r24, 0xF0	; 240
    1adc:	90 70       	andi	r25, 0x00	; 0
    1ade:	8d 93       	st	X+, r24
    1ae0:	9c 93       	st	X, r25
DIO_SetPortValue(PORTDATA,x);
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	eb 5a       	subi	r30, 0xAB	; 171
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	90 81       	ld	r25, Z
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	69 2f       	mov	r22, r25
    1aee:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>

DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    1afc:	fe 01       	movw	r30, r28
    1afe:	ef 5a       	subi	r30, 0xAF	; 175
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e4       	ldi	r27, 0x40	; 64
    1b0a:	80 83       	st	Z, r24
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	a2 83       	std	Z+2, r26	; 0x02
    1b10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	8e 01       	movw	r16, r28
    1b14:	03 5b       	subi	r16, 0xB3	; 179
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ef 5a       	subi	r30, 0xAF	; 175
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a ef       	ldi	r20, 0xFA	; 250
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	f8 01       	movw	r30, r16
    1b38:	80 83       	st	Z, r24
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	a2 83       	std	Z+2, r26	; 0x02
    1b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b40:	fe 01       	movw	r30, r28
    1b42:	e3 5b       	subi	r30, 0xB3	; 179
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	60 81       	ld	r22, Z
    1b48:	71 81       	ldd	r23, Z+1	; 0x01
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	44 f4       	brge	.+16     	; 0x1b6e <LCD_Vid_SendCommand4Bit_test+0xf0>
		__ticks = 1;
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e5 5b       	subi	r30, 0xB5	; 181
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	64 c0       	rjmp	.+200    	; 0x1c36 <LCD_Vid_SendCommand4Bit_test+0x1b8>
	else if (__tmp > 65535)
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e3 5b       	subi	r30, 0xB3	; 179
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	0c f0       	brlt	.+2      	; 0x1b8e <LCD_Vid_SendCommand4Bit_test+0x110>
    1b8c:	43 c0       	rjmp	.+134    	; 0x1c14 <LCD_Vid_SendCommand4Bit_test+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ef 5a       	subi	r30, 0xAF	; 175
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8e 01       	movw	r16, r28
    1bae:	05 5b       	subi	r16, 0xB5	; 181
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
    1bc4:	1f c0       	rjmp	.+62     	; 0x1c04 <LCD_Vid_SendCommand4Bit_test+0x186>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e7 5b       	subi	r30, 0xB7	; 183
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	88 ec       	ldi	r24, 0xC8	; 200
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e7 5b       	subi	r30, 0xB7	; 183
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_Vid_SendCommand4Bit_test+0x160>
    1be2:	fe 01       	movw	r30, r28
    1be4:	e7 5b       	subi	r30, 0xB7	; 183
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	de 01       	movw	r26, r28
    1bee:	a5 5b       	subi	r26, 0xB5	; 181
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e5 5b       	subi	r30, 0xB5	; 181
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	9c 93       	st	X, r25
    1c02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	fe 01       	movw	r30, r28
    1c06:	e5 5b       	subi	r30, 0xB5	; 181
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	d1 f6       	brne	.-76     	; 0x1bc6 <LCD_Vid_SendCommand4Bit_test+0x148>
    1c12:	27 c0       	rjmp	.+78     	; 0x1c62 <LCD_Vid_SendCommand4Bit_test+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	8e 01       	movw	r16, r28
    1c16:	05 5b       	subi	r16, 0xB5	; 181
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e3 5b       	subi	r30, 0xB3	; 179
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	f8 01       	movw	r30, r16
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
    1c36:	de 01       	movw	r26, r28
    1c38:	a9 5b       	subi	r26, 0xB9	; 185
    1c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e5 5b       	subi	r30, 0xB5	; 181
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	8d 93       	st	X+, r24
    1c48:	9c 93       	st	X, r25
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e9 5b       	subi	r30, 0xB9	; 185
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_Vid_SendCommand4Bit_test+0x1d6>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e9 5b       	subi	r30, 0xB9	; 185
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	62 e0       	ldi	r22, 0x02	; 2
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ed 5b       	subi	r30, 0xBD	; 189
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e0       	ldi	r26, 0x00	; 0
    1c78:	b0 e4       	ldi	r27, 0x40	; 64
    1c7a:	80 83       	st	Z, r24
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	a2 83       	std	Z+2, r26	; 0x02
    1c80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	8e 01       	movw	r16, r28
    1c84:	01 5c       	subi	r16, 0xC1	; 193
    1c86:	1f 4f       	sbci	r17, 0xFF	; 255
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ed 5b       	subi	r30, 0xBD	; 189
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	80 83       	st	Z, r24
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	a2 83       	std	Z+2, r26	; 0x02
    1cae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	ff 96       	adiw	r30, 0x3f	; 63
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e8       	ldi	r20, 0x80	; 128
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <LCD_Vid_SendCommand4Bit_test+0x258>
		__ticks = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9e af       	std	Y+62, r25	; 0x3e
    1cd2:	8d af       	std	Y+61, r24	; 0x3d
    1cd4:	46 c0       	rjmp	.+140    	; 0x1d62 <LCD_Vid_SendCommand4Bit_test+0x2e4>
	else if (__tmp > 65535)
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ff 96       	adiw	r30, 0x3f	; 63
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	3f ef       	ldi	r19, 0xFF	; 255
    1ce6:	4f e7       	ldi	r20, 0x7F	; 127
    1ce8:	57 e4       	ldi	r21, 0x47	; 71
    1cea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cee:	18 16       	cp	r1, r24
    1cf0:	64 f5       	brge	.+88     	; 0x1d4a <LCD_Vid_SendCommand4Bit_test+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	ed 5b       	subi	r30, 0xBD	; 189
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	60 81       	ld	r22, Z
    1cfa:	71 81       	ldd	r23, Z+1	; 0x01
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9e af       	std	Y+62, r25	; 0x3e
    1d1e:	8d af       	std	Y+61, r24	; 0x3d
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_Vid_SendCommand4Bit_test+0x2c2>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9c af       	std	Y+60, r25	; 0x3c
    1d28:	8b af       	std	Y+59, r24	; 0x3b
    1d2a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d2c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_Vid_SendCommand4Bit_test+0x2b0>
    1d32:	9c af       	std	Y+60, r25	; 0x3c
    1d34:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9e af       	std	Y+62, r25	; 0x3e
    1d3e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_Vid_SendCommand4Bit_test+0x2a4>
    1d48:	16 c0       	rjmp	.+44     	; 0x1d76 <LCD_Vid_SendCommand4Bit_test+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ff 96       	adiw	r30, 0x3f	; 63
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e af       	std	Y+62, r25	; 0x3e
    1d60:	8d af       	std	Y+61, r24	; 0x3d
    1d62:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d64:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d66:	9a af       	std	Y+58, r25	; 0x3a
    1d68:	89 af       	std	Y+57, r24	; 0x39
    1d6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_Vid_SendCommand4Bit_test+0x2f0>
    1d72:	9a af       	std	Y+58, r25	; 0x3a
    1d74:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	62 e0       	ldi	r22, 0x02	; 2
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>

DIO_SetPortValue(PORTDATA,x);
    1d80:	fe 01       	movw	r30, r28
    1d82:	eb 5a       	subi	r30, 0xAB	; 171
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	90 81       	ld	r25, Z
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	69 2f       	mov	r22, r25
    1d8c:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>


DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	62 e0       	ldi	r22, 0x02	; 2
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    1da0:	b0 e4       	ldi	r27, 0x40	; 64
    1da2:	8d ab       	std	Y+53, r24	; 0x35
    1da4:	9e ab       	std	Y+54, r25	; 0x36
    1da6:	af ab       	std	Y+55, r26	; 0x37
    1da8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1daa:	6d a9       	ldd	r22, Y+53	; 0x35
    1dac:	7e a9       	ldd	r23, Y+54	; 0x36
    1dae:	8f a9       	ldd	r24, Y+55	; 0x37
    1db0:	98 ad       	ldd	r25, Y+56	; 0x38
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a ef       	ldi	r20, 0xFA	; 250
    1db8:	54 e4       	ldi	r21, 0x44	; 68
    1dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	89 ab       	std	Y+49, r24	; 0x31
    1dc4:	9a ab       	std	Y+50, r25	; 0x32
    1dc6:	ab ab       	std	Y+51, r26	; 0x33
    1dc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dca:	69 a9       	ldd	r22, Y+49	; 0x31
    1dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dce:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dde:	88 23       	and	r24, r24
    1de0:	2c f4       	brge	.+10     	; 0x1dec <LCD_Vid_SendCommand4Bit_test+0x36e>
		__ticks = 1;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	98 ab       	std	Y+48, r25	; 0x30
    1de8:	8f a7       	std	Y+47, r24	; 0x2f
    1dea:	3f c0       	rjmp	.+126    	; 0x1e6a <LCD_Vid_SendCommand4Bit_test+0x3ec>
	else if (__tmp > 65535)
    1dec:	69 a9       	ldd	r22, Y+49	; 0x31
    1dee:	7a a9       	ldd	r23, Y+50	; 0x32
    1df0:	8b a9       	ldd	r24, Y+51	; 0x33
    1df2:	9c a9       	ldd	r25, Y+52	; 0x34
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	3f ef       	ldi	r19, 0xFF	; 255
    1df8:	4f e7       	ldi	r20, 0x7F	; 127
    1dfa:	57 e4       	ldi	r21, 0x47	; 71
    1dfc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e00:	18 16       	cp	r1, r24
    1e02:	4c f5       	brge	.+82     	; 0x1e56 <LCD_Vid_SendCommand4Bit_test+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	6d a9       	ldd	r22, Y+53	; 0x35
    1e06:	7e a9       	ldd	r23, Y+54	; 0x36
    1e08:	8f a9       	ldd	r24, Y+55	; 0x37
    1e0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	98 ab       	std	Y+48, r25	; 0x30
    1e2a:	8f a7       	std	Y+47, r24	; 0x2f
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <LCD_Vid_SendCommand4Bit_test+0x3ce>
    1e2e:	88 ec       	ldi	r24, 0xC8	; 200
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9e a7       	std	Y+46, r25	; 0x2e
    1e34:	8d a7       	std	Y+45, r24	; 0x2d
    1e36:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e38:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <LCD_Vid_SendCommand4Bit_test+0x3bc>
    1e3e:	9e a7       	std	Y+46, r25	; 0x2e
    1e40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e44:	98 a9       	ldd	r25, Y+48	; 0x30
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	98 ab       	std	Y+48, r25	; 0x30
    1e4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	69 f7       	brne	.-38     	; 0x1e2e <LCD_Vid_SendCommand4Bit_test+0x3b0>
    1e54:	14 c0       	rjmp	.+40     	; 0x1e7e <LCD_Vid_SendCommand4Bit_test+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	69 a9       	ldd	r22, Y+49	; 0x31
    1e58:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	98 ab       	std	Y+48, r25	; 0x30
    1e68:	8f a7       	std	Y+47, r24	; 0x2f
    1e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6e:	9c a7       	std	Y+44, r25	; 0x2c
    1e70:	8b a7       	std	Y+43, r24	; 0x2b
    1e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <LCD_Vid_SendCommand4Bit_test+0x3f8>
    1e7a:	9c a7       	std	Y+44, r25	; 0x2c
    1e7c:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a0 e0       	ldi	r26, 0x00	; 0
    1e8e:	b0 e4       	ldi	r27, 0x40	; 64
    1e90:	8f a3       	std	Y+39, r24	; 0x27
    1e92:	98 a7       	std	Y+40, r25	; 0x28
    1e94:	a9 a7       	std	Y+41, r26	; 0x29
    1e96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e98:	6f a1       	ldd	r22, Y+39	; 0x27
    1e9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4a ef       	ldi	r20, 0xFA	; 250
    1ea6:	54 e4       	ldi	r21, 0x44	; 68
    1ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	8b a3       	std	Y+35, r24	; 0x23
    1eb2:	9c a3       	std	Y+36, r25	; 0x24
    1eb4:	ad a3       	std	Y+37, r26	; 0x25
    1eb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eba:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	5f e3       	ldi	r21, 0x3F	; 63
    1ec8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ecc:	88 23       	and	r24, r24
    1ece:	2c f4       	brge	.+10     	; 0x1eda <LCD_Vid_SendCommand4Bit_test+0x45c>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9a a3       	std	Y+34, r25	; 0x22
    1ed6:	89 a3       	std	Y+33, r24	; 0x21
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <LCD_Vid_SendCommand4Bit_test+0x4da>
	else if (__tmp > 65535)
    1eda:	6b a1       	ldd	r22, Y+35	; 0x23
    1edc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ede:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	3f ef       	ldi	r19, 0xFF	; 255
    1ee6:	4f e7       	ldi	r20, 0x7F	; 127
    1ee8:	57 e4       	ldi	r21, 0x47	; 71
    1eea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eee:	18 16       	cp	r1, r24
    1ef0:	4c f5       	brge	.+82     	; 0x1f44 <LCD_Vid_SendCommand4Bit_test+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e2       	ldi	r20, 0x20	; 32
    1f00:	51 e4       	ldi	r21, 0x41	; 65
    1f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9a a3       	std	Y+34, r25	; 0x22
    1f18:	89 a3       	std	Y+33, r24	; 0x21
    1f1a:	0f c0       	rjmp	.+30     	; 0x1f3a <LCD_Vid_SendCommand4Bit_test+0x4bc>
    1f1c:	88 ec       	ldi	r24, 0xC8	; 200
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	98 a3       	std	Y+32, r25	; 0x20
    1f22:	8f 8f       	std	Y+31, r24	; 0x1f
    1f24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f26:	98 a1       	ldd	r25, Y+32	; 0x20
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_Vid_SendCommand4Bit_test+0x4aa>
    1f2c:	98 a3       	std	Y+32, r25	; 0x20
    1f2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f30:	89 a1       	ldd	r24, Y+33	; 0x21
    1f32:	9a a1       	ldd	r25, Y+34	; 0x22
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	9a a3       	std	Y+34, r25	; 0x22
    1f38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	69 f7       	brne	.-38     	; 0x1f1c <LCD_Vid_SendCommand4Bit_test+0x49e>
    1f42:	14 c0       	rjmp	.+40     	; 0x1f6c <LCD_Vid_SendCommand4Bit_test+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f44:	6b a1       	ldd	r22, Y+35	; 0x23
    1f46:	7c a1       	ldd	r23, Y+36	; 0x24
    1f48:	8d a1       	ldd	r24, Y+37	; 0x25
    1f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9a a3       	std	Y+34, r25	; 0x22
    1f56:	89 a3       	std	Y+33, r24	; 0x21
    1f58:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_Vid_SendCommand4Bit_test+0x4e6>
    1f68:	9e 8f       	std	Y+30, r25	; 0x1e
    1f6a:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	62 e0       	ldi	r22, 0x02	; 2
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>


//*****************************************
x=command<<4;
    1f76:	fe 01       	movw	r30, r28
    1f78:	e9 5a       	subi	r30, 0xA9	; 169
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	fe 01       	movw	r30, r28
    1f84:	eb 5a       	subi	r30, 0xAB	; 171
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	82 95       	swap	r24
    1f8a:	92 95       	swap	r25
    1f8c:	90 7f       	andi	r25, 0xF0	; 240
    1f8e:	98 27       	eor	r25, r24
    1f90:	80 7f       	andi	r24, 0xF0	; 240
    1f92:	98 27       	eor	r25, r24
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
x=x&0xf0;
    1f98:	de 01       	movw	r26, r28
    1f9a:	ab 5a       	subi	r26, 0xAB	; 171
    1f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	eb 5a       	subi	r30, 0xAB	; 171
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	80 7f       	andi	r24, 0xF0	; 240
    1faa:	90 70       	andi	r25, 0x00	; 0
    1fac:	8d 93       	st	X+, r24
    1fae:	9c 93       	st	X, r25
DIO_SetPortValue(PORTDATA,x);
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	eb 5a       	subi	r30, 0xAB	; 171
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	90 81       	ld	r25, Z
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	69 2f       	mov	r22, r25
    1fbc:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	62 e0       	ldi	r22, 0x02	; 2
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e0       	ldi	r26, 0x00	; 0
    1fd0:	b0 e4       	ldi	r27, 0x40	; 64
    1fd2:	89 8f       	std	Y+25, r24	; 0x19
    1fd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	69 8d       	ldd	r22, Y+25	; 0x19
    1fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a ef       	ldi	r20, 0xFA	; 250
    1fe8:	54 e4       	ldi	r21, 0x44	; 68
    1fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8d 8b       	std	Y+21, r24	; 0x15
    1ff4:	9e 8b       	std	Y+22, r25	; 0x16
    1ff6:	af 8b       	std	Y+23, r26	; 0x17
    1ff8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <LCD_Vid_SendCommand4Bit_test+0x59e>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9c 8b       	std	Y+20, r25	; 0x14
    2018:	8b 8b       	std	Y+19, r24	; 0x13
    201a:	3f c0       	rjmp	.+126    	; 0x209a <LCD_Vid_SendCommand4Bit_test+0x61c>
	else if (__tmp > 65535)
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <LCD_Vid_SendCommand4Bit_test+0x608>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	69 8d       	ldd	r22, Y+25	; 0x19
    2036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
    205c:	0f c0       	rjmp	.+30     	; 0x207c <LCD_Vid_SendCommand4Bit_test+0x5fe>
    205e:	88 ec       	ldi	r24, 0xC8	; 200
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9a 8b       	std	Y+18, r25	; 0x12
    2064:	89 8b       	std	Y+17, r24	; 0x11
    2066:	89 89       	ldd	r24, Y+17	; 0x11
    2068:	9a 89       	ldd	r25, Y+18	; 0x12
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_Vid_SendCommand4Bit_test+0x5ec>
    206e:	9a 8b       	std	Y+18, r25	; 0x12
    2070:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9c 8b       	std	Y+20, r25	; 0x14
    207a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8b 89       	ldd	r24, Y+19	; 0x13
    207e:	9c 89       	ldd	r25, Y+20	; 0x14
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <LCD_Vid_SendCommand4Bit_test+0x5e0>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <LCD_Vid_SendCommand4Bit_test+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	8b 89       	ldd	r24, Y+19	; 0x13
    209c:	9c 89       	ldd	r25, Y+20	; 0x14
    209e:	98 8b       	std	Y+16, r25	; 0x10
    20a0:	8f 87       	std	Y+15, r24	; 0x0f
    20a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a4:	98 89       	ldd	r25, Y+16	; 0x10
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_Vid_SendCommand4Bit_test+0x628>
    20aa:	98 8b       	std	Y+16, r25	; 0x10
    20ac:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	62 e0       	ldi	r22, 0x02	; 2
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e0       	ldi	r26, 0x00	; 0
    20be:	b0 e4       	ldi	r27, 0x40	; 64
    20c0:	8b 87       	std	Y+11, r24	; 0x0b
    20c2:	9c 87       	std	Y+12, r25	; 0x0c
    20c4:	ad 87       	std	Y+13, r26	; 0x0d
    20c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	4a ef       	ldi	r20, 0xFA	; 250
    20d6:	54 e4       	ldi	r21, 0x44	; 68
    20d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8f 83       	std	Y+7, r24	; 0x07
    20e2:	98 87       	std	Y+8, r25	; 0x08
    20e4:	a9 87       	std	Y+9, r26	; 0x09
    20e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	2c f4       	brge	.+10     	; 0x210a <LCD_Vid_SendCommand4Bit_test+0x68c>
		__ticks = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <LCD_Vid_SendCommand4Bit_test+0x70a>
	else if (__tmp > 65535)
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	4c f5       	brge	.+82     	; 0x2174 <LCD_Vid_SendCommand4Bit_test+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9e 83       	std	Y+6, r25	; 0x06
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	0f c0       	rjmp	.+30     	; 0x216a <LCD_Vid_SendCommand4Bit_test+0x6ec>
    214c:	88 ec       	ldi	r24, 0xC8	; 200
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_Vid_SendCommand4Bit_test+0x6da>
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	69 f7       	brne	.-38     	; 0x214c <LCD_Vid_SendCommand4Bit_test+0x6ce>
    2172:	14 c0       	rjmp	.+40     	; 0x219c <LCD_Vid_SendCommand4Bit_test+0x71e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_Vid_SendCommand4Bit_test+0x716>
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	62 e0       	ldi	r22, 0x02	; 2
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
}
    21a6:	c9 5a       	subi	r28, 0xA9	; 169
    21a8:	df 4f       	sbci	r29, 0xFF	; 255
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	08 95       	ret

000021be <LCD_Vid_SendCommand4Bit>:

void LCD_Vid_SendCommand4Bit(unsigned char command)
{int x;
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	eb 97       	sbiw	r28, 0x3b	; 59
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	8b af       	std	Y+59, r24	; 0x3b
DIO_SetPinValue(PORTCONTROL,RS,LOW);
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTCONTROL,RW,LOW);
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>

x=command;
    21e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9a af       	std	Y+58, r25	; 0x3a
    21f0:	89 af       	std	Y+57, r24	; 0x39
x=x&0xf0;
    21f2:	89 ad       	ldd	r24, Y+57	; 0x39
    21f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    21f6:	80 7f       	andi	r24, 0xF0	; 240
    21f8:	90 70       	andi	r25, 0x00	; 0
    21fa:	9a af       	std	Y+58, r25	; 0x3a
    21fc:	89 af       	std	Y+57, r24	; 0x39
DIO_SetPortValue(PORTDATA,x);
    21fe:	99 ad       	ldd	r25, Y+57	; 0x39
    2200:	83 e0       	ldi	r24, 0x03	; 3
    2202:	69 2f       	mov	r22, r25
    2204:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>

DIO_SetPinValue(PORTCONTROL,E,HIGH);
    2208:	82 e0       	ldi	r24, 0x02	; 2
    220a:	62 e0       	ldi	r22, 0x02	; 2
    220c:	41 e0       	ldi	r20, 0x01	; 1
    220e:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a0 e0       	ldi	r26, 0x00	; 0
    2218:	b0 e4       	ldi	r27, 0x40	; 64
    221a:	8d ab       	std	Y+53, r24	; 0x35
    221c:	9e ab       	std	Y+54, r25	; 0x36
    221e:	af ab       	std	Y+55, r26	; 0x37
    2220:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6d a9       	ldd	r22, Y+53	; 0x35
    2224:	7e a9       	ldd	r23, Y+54	; 0x36
    2226:	8f a9       	ldd	r24, Y+55	; 0x37
    2228:	98 ad       	ldd	r25, Y+56	; 0x38
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a ef       	ldi	r20, 0xFA	; 250
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	89 ab       	std	Y+49, r24	; 0x31
    223c:	9a ab       	std	Y+50, r25	; 0x32
    223e:	ab ab       	std	Y+51, r26	; 0x33
    2240:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2242:	69 a9       	ldd	r22, Y+49	; 0x31
    2244:	7a a9       	ldd	r23, Y+50	; 0x32
    2246:	8b a9       	ldd	r24, Y+51	; 0x33
    2248:	9c a9       	ldd	r25, Y+52	; 0x34
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <LCD_Vid_SendCommand4Bit+0xa6>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	98 ab       	std	Y+48, r25	; 0x30
    2260:	8f a7       	std	Y+47, r24	; 0x2f
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <LCD_Vid_SendCommand4Bit+0x124>
	else if (__tmp > 65535)
    2264:	69 a9       	ldd	r22, Y+49	; 0x31
    2266:	7a a9       	ldd	r23, Y+50	; 0x32
    2268:	8b a9       	ldd	r24, Y+51	; 0x33
    226a:	9c a9       	ldd	r25, Y+52	; 0x34
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <LCD_Vid_SendCommand4Bit+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6d a9       	ldd	r22, Y+53	; 0x35
    227e:	7e a9       	ldd	r23, Y+54	; 0x36
    2280:	8f a9       	ldd	r24, Y+55	; 0x37
    2282:	98 ad       	ldd	r25, Y+56	; 0x38
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	98 ab       	std	Y+48, r25	; 0x30
    22a2:	8f a7       	std	Y+47, r24	; 0x2f
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <LCD_Vid_SendCommand4Bit+0x106>
    22a6:	88 ec       	ldi	r24, 0xC8	; 200
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9e a7       	std	Y+46, r25	; 0x2e
    22ac:	8d a7       	std	Y+45, r24	; 0x2d
    22ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_Vid_SendCommand4Bit+0xf4>
    22b6:	9e a7       	std	Y+46, r25	; 0x2e
    22b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    22bc:	98 a9       	ldd	r25, Y+48	; 0x30
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	98 ab       	std	Y+48, r25	; 0x30
    22c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c6:	98 a9       	ldd	r25, Y+48	; 0x30
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <LCD_Vid_SendCommand4Bit+0xe8>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <LCD_Vid_SendCommand4Bit+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	69 a9       	ldd	r22, Y+49	; 0x31
    22d0:	7a a9       	ldd	r23, Y+50	; 0x32
    22d2:	8b a9       	ldd	r24, Y+51	; 0x33
    22d4:	9c a9       	ldd	r25, Y+52	; 0x34
    22d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	98 ab       	std	Y+48, r25	; 0x30
    22e0:	8f a7       	std	Y+47, r24	; 0x2f
    22e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e4:	98 a9       	ldd	r25, Y+48	; 0x30
    22e6:	9c a7       	std	Y+44, r25	; 0x2c
    22e8:	8b a7       	std	Y+43, r24	; 0x2b
    22ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_Vid_SendCommand4Bit+0x130>
    22f2:	9c a7       	std	Y+44, r25	; 0x2c
    22f4:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	62 e0       	ldi	r22, 0x02	; 2
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e0       	ldi	r26, 0x00	; 0
    2306:	b0 e4       	ldi	r27, 0x40	; 64
    2308:	8f a3       	std	Y+39, r24	; 0x27
    230a:	98 a7       	std	Y+40, r25	; 0x28
    230c:	a9 a7       	std	Y+41, r26	; 0x29
    230e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6f a1       	ldd	r22, Y+39	; 0x27
    2312:	78 a5       	ldd	r23, Y+40	; 0x28
    2314:	89 a5       	ldd	r24, Y+41	; 0x29
    2316:	9a a5       	ldd	r25, Y+42	; 0x2a
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a ef       	ldi	r20, 0xFA	; 250
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8b a3       	std	Y+35, r24	; 0x23
    232a:	9c a3       	std	Y+36, r25	; 0x24
    232c:	ad a3       	std	Y+37, r26	; 0x25
    232e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2330:	6b a1       	ldd	r22, Y+35	; 0x23
    2332:	7c a1       	ldd	r23, Y+36	; 0x24
    2334:	8d a1       	ldd	r24, Y+37	; 0x25
    2336:	9e a1       	ldd	r25, Y+38	; 0x26
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_Vid_SendCommand4Bit+0x194>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9a a3       	std	Y+34, r25	; 0x22
    234e:	89 a3       	std	Y+33, r24	; 0x21
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <LCD_Vid_SendCommand4Bit+0x212>
	else if (__tmp > 65535)
    2352:	6b a1       	ldd	r22, Y+35	; 0x23
    2354:	7c a1       	ldd	r23, Y+36	; 0x24
    2356:	8d a1       	ldd	r24, Y+37	; 0x25
    2358:	9e a1       	ldd	r25, Y+38	; 0x26
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <LCD_Vid_SendCommand4Bit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6f a1       	ldd	r22, Y+39	; 0x27
    236c:	78 a5       	ldd	r23, Y+40	; 0x28
    236e:	89 a5       	ldd	r24, Y+41	; 0x29
    2370:	9a a5       	ldd	r25, Y+42	; 0x2a
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9a a3       	std	Y+34, r25	; 0x22
    2390:	89 a3       	std	Y+33, r24	; 0x21
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <LCD_Vid_SendCommand4Bit+0x1f4>
    2394:	88 ec       	ldi	r24, 0xC8	; 200
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	98 a3       	std	Y+32, r25	; 0x20
    239a:	8f 8f       	std	Y+31, r24	; 0x1f
    239c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    239e:	98 a1       	ldd	r25, Y+32	; 0x20
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_Vid_SendCommand4Bit+0x1e2>
    23a4:	98 a3       	std	Y+32, r25	; 0x20
    23a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	89 a1       	ldd	r24, Y+33	; 0x21
    23aa:	9a a1       	ldd	r25, Y+34	; 0x22
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9a a3       	std	Y+34, r25	; 0x22
    23b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	89 a1       	ldd	r24, Y+33	; 0x21
    23b4:	9a a1       	ldd	r25, Y+34	; 0x22
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <LCD_Vid_SendCommand4Bit+0x1d6>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <LCD_Vid_SendCommand4Bit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6b a1       	ldd	r22, Y+35	; 0x23
    23be:	7c a1       	ldd	r23, Y+36	; 0x24
    23c0:	8d a1       	ldd	r24, Y+37	; 0x25
    23c2:	9e a1       	ldd	r25, Y+38	; 0x26
    23c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9a a3       	std	Y+34, r25	; 0x22
    23ce:	89 a3       	std	Y+33, r24	; 0x21
    23d0:	89 a1       	ldd	r24, Y+33	; 0x21
    23d2:	9a a1       	ldd	r25, Y+34	; 0x22
    23d4:	9e 8f       	std	Y+30, r25	; 0x1e
    23d6:	8d 8f       	std	Y+29, r24	; 0x1d
    23d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_Vid_SendCommand4Bit+0x21e>
    23e0:	9e 8f       	std	Y+30, r25	; 0x1e
    23e2:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	62 e0       	ldi	r22, 0x02	; 2
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>



//*****************************************
x=command<<4;
    23ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	82 95       	swap	r24
    23f6:	92 95       	swap	r25
    23f8:	90 7f       	andi	r25, 0xF0	; 240
    23fa:	98 27       	eor	r25, r24
    23fc:	80 7f       	andi	r24, 0xF0	; 240
    23fe:	98 27       	eor	r25, r24
    2400:	9a af       	std	Y+58, r25	; 0x3a
    2402:	89 af       	std	Y+57, r24	; 0x39
x=x&0xf0;
    2404:	89 ad       	ldd	r24, Y+57	; 0x39
    2406:	9a ad       	ldd	r25, Y+58	; 0x3a
    2408:	80 7f       	andi	r24, 0xF0	; 240
    240a:	90 70       	andi	r25, 0x00	; 0
    240c:	9a af       	std	Y+58, r25	; 0x3a
    240e:	89 af       	std	Y+57, r24	; 0x39
DIO_SetPortValue(PORTDATA,x);
    2410:	99 ad       	ldd	r25, Y+57	; 0x39
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	69 2f       	mov	r22, r25
    2416:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>

DIO_SetPinValue(PORTCONTROL,E,HIGH);
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	62 e0       	ldi	r22, 0x02	; 2
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a0 e0       	ldi	r26, 0x00	; 0
    242a:	b0 e4       	ldi	r27, 0x40	; 64
    242c:	89 8f       	std	Y+25, r24	; 0x19
    242e:	9a 8f       	std	Y+26, r25	; 0x1a
    2430:	ab 8f       	std	Y+27, r26	; 0x1b
    2432:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	69 8d       	ldd	r22, Y+25	; 0x19
    2436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a ef       	ldi	r20, 0xFA	; 250
    2442:	54 e4       	ldi	r21, 0x44	; 68
    2444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8d 8b       	std	Y+21, r24	; 0x15
    244e:	9e 8b       	std	Y+22, r25	; 0x16
    2450:	af 8b       	std	Y+23, r26	; 0x17
    2452:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2454:	6d 89       	ldd	r22, Y+21	; 0x15
    2456:	7e 89       	ldd	r23, Y+22	; 0x16
    2458:	8f 89       	ldd	r24, Y+23	; 0x17
    245a:	98 8d       	ldd	r25, Y+24	; 0x18
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <LCD_Vid_SendCommand4Bit+0x2b8>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 8b       	std	Y+20, r25	; 0x14
    2472:	8b 8b       	std	Y+19, r24	; 0x13
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <LCD_Vid_SendCommand4Bit+0x336>
	else if (__tmp > 65535)
    2476:	6d 89       	ldd	r22, Y+21	; 0x15
    2478:	7e 89       	ldd	r23, Y+22	; 0x16
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <LCD_Vid_SendCommand4Bit+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	69 8d       	ldd	r22, Y+25	; 0x19
    2490:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2492:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2494:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <LCD_Vid_SendCommand4Bit+0x318>
    24b8:	88 ec       	ldi	r24, 0xC8	; 200
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9a 8b       	std	Y+18, r25	; 0x12
    24be:	89 8b       	std	Y+17, r24	; 0x11
    24c0:	89 89       	ldd	r24, Y+17	; 0x11
    24c2:	9a 89       	ldd	r25, Y+18	; 0x12
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_Vid_SendCommand4Bit+0x306>
    24c8:	9a 8b       	std	Y+18, r25	; 0x12
    24ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9c 8b       	std	Y+20, r25	; 0x14
    24d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8b 89       	ldd	r24, Y+19	; 0x13
    24d8:	9c 89       	ldd	r25, Y+20	; 0x14
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <LCD_Vid_SendCommand4Bit+0x2fa>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <LCD_Vid_SendCommand4Bit+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	6d 89       	ldd	r22, Y+21	; 0x15
    24e2:	7e 89       	ldd	r23, Y+22	; 0x16
    24e4:	8f 89       	ldd	r24, Y+23	; 0x17
    24e6:	98 8d       	ldd	r25, Y+24	; 0x18
    24e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9c 8b       	std	Y+20, r25	; 0x14
    24f2:	8b 8b       	std	Y+19, r24	; 0x13
    24f4:	8b 89       	ldd	r24, Y+19	; 0x13
    24f6:	9c 89       	ldd	r25, Y+20	; 0x14
    24f8:	98 8b       	std	Y+16, r25	; 0x10
    24fa:	8f 87       	std	Y+15, r24	; 0x0f
    24fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fe:	98 89       	ldd	r25, Y+16	; 0x10
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <LCD_Vid_SendCommand4Bit+0x342>
    2504:	98 8b       	std	Y+16, r25	; 0x10
    2506:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	b0 e4       	ldi	r27, 0x40	; 64
    251a:	8b 87       	std	Y+11, r24	; 0x0b
    251c:	9c 87       	std	Y+12, r25	; 0x0c
    251e:	ad 87       	std	Y+13, r26	; 0x0d
    2520:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2522:	6b 85       	ldd	r22, Y+11	; 0x0b
    2524:	7c 85       	ldd	r23, Y+12	; 0x0c
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a ef       	ldi	r20, 0xFA	; 250
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8f 83       	std	Y+7, r24	; 0x07
    253c:	98 87       	std	Y+8, r25	; 0x08
    253e:	a9 87       	std	Y+9, r26	; 0x09
    2540:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	2c f4       	brge	.+10     	; 0x2564 <LCD_Vid_SendCommand4Bit+0x3a6>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	3f c0       	rjmp	.+126    	; 0x25e2 <LCD_Vid_SendCommand4Bit+0x424>
	else if (__tmp > 65535)
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	4c f5       	brge	.+82     	; 0x25ce <LCD_Vid_SendCommand4Bit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e2       	ldi	r20, 0x20	; 32
    258a:	51 e4       	ldi	r21, 0x41	; 65
    258c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <LCD_Vid_SendCommand4Bit+0x406>
    25a6:	88 ec       	ldi	r24, 0xC8	; 200
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_Vid_SendCommand4Bit+0x3f4>
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	69 f7       	brne	.-38     	; 0x25a6 <LCD_Vid_SendCommand4Bit+0x3e8>
    25cc:	14 c0       	rjmp	.+40     	; 0x25f6 <LCD_Vid_SendCommand4Bit+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_Vid_SendCommand4Bit+0x430>
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	62 e0       	ldi	r22, 0x02	; 2
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
}
    2600:	eb 96       	adiw	r28, 0x3b	; 59
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <LCD_Vid_SendChar4Bit>:

void LCD_Vid_SendChar4Bit(unsigned char Data)
{int x;
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	eb 97       	sbiw	r28, 0x3b	; 59
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	8b af       	std	Y+59, r24	; 0x3b
	DIO_SetPinValue(PORTCONTROL,RS,HIGH);
    2628:	82 e0       	ldi	r24, 0x02	; 2
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	41 e0       	ldi	r20, 0x01	; 1
    262e:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,RW,LOW);
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	x=Data;
    263c:	8b ad       	ldd	r24, Y+59	; 0x3b
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9a af       	std	Y+58, r25	; 0x3a
    2644:	89 af       	std	Y+57, r24	; 0x39
	x=x&0xf0;
    2646:	89 ad       	ldd	r24, Y+57	; 0x39
    2648:	9a ad       	ldd	r25, Y+58	; 0x3a
    264a:	80 7f       	andi	r24, 0xF0	; 240
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	9a af       	std	Y+58, r25	; 0x3a
    2650:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPortValue(PORTDATA,x);
    2652:	99 ad       	ldd	r25, Y+57	; 0x39
    2654:	83 e0       	ldi	r24, 0x03	; 3
    2656:	69 2f       	mov	r22, r25
    2658:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    265c:	82 e0       	ldi	r24, 0x02	; 2
    265e:	62 e0       	ldi	r22, 0x02	; 2
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a0 e0       	ldi	r26, 0x00	; 0
    266c:	b0 e4       	ldi	r27, 0x40	; 64
    266e:	8d ab       	std	Y+53, r24	; 0x35
    2670:	9e ab       	std	Y+54, r25	; 0x36
    2672:	af ab       	std	Y+55, r26	; 0x37
    2674:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2676:	6d a9       	ldd	r22, Y+53	; 0x35
    2678:	7e a9       	ldd	r23, Y+54	; 0x36
    267a:	8f a9       	ldd	r24, Y+55	; 0x37
    267c:	98 ad       	ldd	r25, Y+56	; 0x38
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	4a ef       	ldi	r20, 0xFA	; 250
    2684:	54 e4       	ldi	r21, 0x44	; 68
    2686:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	89 ab       	std	Y+49, r24	; 0x31
    2690:	9a ab       	std	Y+50, r25	; 0x32
    2692:	ab ab       	std	Y+51, r26	; 0x33
    2694:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2696:	69 a9       	ldd	r22, Y+49	; 0x31
    2698:	7a a9       	ldd	r23, Y+50	; 0x32
    269a:	8b a9       	ldd	r24, Y+51	; 0x33
    269c:	9c a9       	ldd	r25, Y+52	; 0x34
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <LCD_Vid_SendChar4Bit+0xa6>
		__ticks = 1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	98 ab       	std	Y+48, r25	; 0x30
    26b4:	8f a7       	std	Y+47, r24	; 0x2f
    26b6:	3f c0       	rjmp	.+126    	; 0x2736 <LCD_Vid_SendChar4Bit+0x124>
	else if (__tmp > 65535)
    26b8:	69 a9       	ldd	r22, Y+49	; 0x31
    26ba:	7a a9       	ldd	r23, Y+50	; 0x32
    26bc:	8b a9       	ldd	r24, Y+51	; 0x33
    26be:	9c a9       	ldd	r25, Y+52	; 0x34
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	3f ef       	ldi	r19, 0xFF	; 255
    26c4:	4f e7       	ldi	r20, 0x7F	; 127
    26c6:	57 e4       	ldi	r21, 0x47	; 71
    26c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26cc:	18 16       	cp	r1, r24
    26ce:	4c f5       	brge	.+82     	; 0x2722 <LCD_Vid_SendChar4Bit+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d0:	6d a9       	ldd	r22, Y+53	; 0x35
    26d2:	7e a9       	ldd	r23, Y+54	; 0x36
    26d4:	8f a9       	ldd	r24, Y+55	; 0x37
    26d6:	98 ad       	ldd	r25, Y+56	; 0x38
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	98 ab       	std	Y+48, r25	; 0x30
    26f6:	8f a7       	std	Y+47, r24	; 0x2f
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <LCD_Vid_SendChar4Bit+0x106>
    26fa:	88 ec       	ldi	r24, 0xC8	; 200
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9e a7       	std	Y+46, r25	; 0x2e
    2700:	8d a7       	std	Y+45, r24	; 0x2d
    2702:	8d a5       	ldd	r24, Y+45	; 0x2d
    2704:	9e a5       	ldd	r25, Y+46	; 0x2e
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <LCD_Vid_SendChar4Bit+0xf4>
    270a:	9e a7       	std	Y+46, r25	; 0x2e
    270c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2710:	98 a9       	ldd	r25, Y+48	; 0x30
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	98 ab       	std	Y+48, r25	; 0x30
    2716:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2718:	8f a5       	ldd	r24, Y+47	; 0x2f
    271a:	98 a9       	ldd	r25, Y+48	; 0x30
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	69 f7       	brne	.-38     	; 0x26fa <LCD_Vid_SendChar4Bit+0xe8>
    2720:	14 c0       	rjmp	.+40     	; 0x274a <LCD_Vid_SendChar4Bit+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	69 a9       	ldd	r22, Y+49	; 0x31
    2724:	7a a9       	ldd	r23, Y+50	; 0x32
    2726:	8b a9       	ldd	r24, Y+51	; 0x33
    2728:	9c a9       	ldd	r25, Y+52	; 0x34
    272a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	98 ab       	std	Y+48, r25	; 0x30
    2734:	8f a7       	std	Y+47, r24	; 0x2f
    2736:	8f a5       	ldd	r24, Y+47	; 0x2f
    2738:	98 a9       	ldd	r25, Y+48	; 0x30
    273a:	9c a7       	std	Y+44, r25	; 0x2c
    273c:	8b a7       	std	Y+43, r24	; 0x2b
    273e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2740:	9c a5       	ldd	r25, Y+44	; 0x2c
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <LCD_Vid_SendChar4Bit+0x130>
    2746:	9c a7       	std	Y+44, r25	; 0x2c
    2748:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(PORTCONTROL,E,LOW);
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	62 e0       	ldi	r22, 0x02	; 2
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a0 e0       	ldi	r26, 0x00	; 0
    275a:	b0 e4       	ldi	r27, 0x40	; 64
    275c:	8f a3       	std	Y+39, r24	; 0x27
    275e:	98 a7       	std	Y+40, r25	; 0x28
    2760:	a9 a7       	std	Y+41, r26	; 0x29
    2762:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2764:	6f a1       	ldd	r22, Y+39	; 0x27
    2766:	78 a5       	ldd	r23, Y+40	; 0x28
    2768:	89 a5       	ldd	r24, Y+41	; 0x29
    276a:	9a a5       	ldd	r25, Y+42	; 0x2a
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4a ef       	ldi	r20, 0xFA	; 250
    2772:	54 e4       	ldi	r21, 0x44	; 68
    2774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8b a3       	std	Y+35, r24	; 0x23
    277e:	9c a3       	std	Y+36, r25	; 0x24
    2780:	ad a3       	std	Y+37, r26	; 0x25
    2782:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	8d a1       	ldd	r24, Y+37	; 0x25
    278a:	9e a1       	ldd	r25, Y+38	; 0x26
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	2c f4       	brge	.+10     	; 0x27a6 <LCD_Vid_SendChar4Bit+0x194>
		__ticks = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9a a3       	std	Y+34, r25	; 0x22
    27a2:	89 a3       	std	Y+33, r24	; 0x21
    27a4:	3f c0       	rjmp	.+126    	; 0x2824 <LCD_Vid_SendChar4Bit+0x212>
	else if (__tmp > 65535)
    27a6:	6b a1       	ldd	r22, Y+35	; 0x23
    27a8:	7c a1       	ldd	r23, Y+36	; 0x24
    27aa:	8d a1       	ldd	r24, Y+37	; 0x25
    27ac:	9e a1       	ldd	r25, Y+38	; 0x26
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	3f ef       	ldi	r19, 0xFF	; 255
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	57 e4       	ldi	r21, 0x47	; 71
    27b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	4c f5       	brge	.+82     	; 0x2810 <LCD_Vid_SendChar4Bit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	6f a1       	ldd	r22, Y+39	; 0x27
    27c0:	78 a5       	ldd	r23, Y+40	; 0x28
    27c2:	89 a5       	ldd	r24, Y+41	; 0x29
    27c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9a a3       	std	Y+34, r25	; 0x22
    27e4:	89 a3       	std	Y+33, r24	; 0x21
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <LCD_Vid_SendChar4Bit+0x1f4>
    27e8:	88 ec       	ldi	r24, 0xC8	; 200
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	98 a3       	std	Y+32, r25	; 0x20
    27ee:	8f 8f       	std	Y+31, r24	; 0x1f
    27f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f2:	98 a1       	ldd	r25, Y+32	; 0x20
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_Vid_SendChar4Bit+0x1e2>
    27f8:	98 a3       	std	Y+32, r25	; 0x20
    27fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fc:	89 a1       	ldd	r24, Y+33	; 0x21
    27fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	9a a3       	std	Y+34, r25	; 0x22
    2804:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2806:	89 a1       	ldd	r24, Y+33	; 0x21
    2808:	9a a1       	ldd	r25, Y+34	; 0x22
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	69 f7       	brne	.-38     	; 0x27e8 <LCD_Vid_SendChar4Bit+0x1d6>
    280e:	14 c0       	rjmp	.+40     	; 0x2838 <LCD_Vid_SendChar4Bit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2810:	6b a1       	ldd	r22, Y+35	; 0x23
    2812:	7c a1       	ldd	r23, Y+36	; 0x24
    2814:	8d a1       	ldd	r24, Y+37	; 0x25
    2816:	9e a1       	ldd	r25, Y+38	; 0x26
    2818:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9a a3       	std	Y+34, r25	; 0x22
    2822:	89 a3       	std	Y+33, r24	; 0x21
    2824:	89 a1       	ldd	r24, Y+33	; 0x21
    2826:	9a a1       	ldd	r25, Y+34	; 0x22
    2828:	9e 8f       	std	Y+30, r25	; 0x1e
    282a:	8d 8f       	std	Y+29, r24	; 0x1d
    282c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    282e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_Vid_SendChar4Bit+0x21e>
    2834:	9e 8f       	std	Y+30, r25	; 0x1e
    2836:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	62 e0       	ldi	r22, 0x02	; 2
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>

	//*****************************************
	x=Data<<4;
    2842:	8b ad       	ldd	r24, Y+59	; 0x3b
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	82 95       	swap	r24
    284a:	92 95       	swap	r25
    284c:	90 7f       	andi	r25, 0xF0	; 240
    284e:	98 27       	eor	r25, r24
    2850:	80 7f       	andi	r24, 0xF0	; 240
    2852:	98 27       	eor	r25, r24
    2854:	9a af       	std	Y+58, r25	; 0x3a
    2856:	89 af       	std	Y+57, r24	; 0x39
	x=x&0xf0;
    2858:	89 ad       	ldd	r24, Y+57	; 0x39
    285a:	9a ad       	ldd	r25, Y+58	; 0x3a
    285c:	80 7f       	andi	r24, 0xF0	; 240
    285e:	90 70       	andi	r25, 0x00	; 0
    2860:	9a af       	std	Y+58, r25	; 0x3a
    2862:	89 af       	std	Y+57, r24	; 0x39
		DIO_SetPortValue(PORTDATA,x);
    2864:	99 ad       	ldd	r25, Y+57	; 0x39
    2866:	83 e0       	ldi	r24, 0x03	; 3
    2868:	69 2f       	mov	r22, r25
    286a:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	62 e0       	ldi	r22, 0x02	; 2
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e4       	ldi	r27, 0x40	; 64
    2880:	89 8f       	std	Y+25, r24	; 0x19
    2882:	9a 8f       	std	Y+26, r25	; 0x1a
    2884:	ab 8f       	std	Y+27, r26	; 0x1b
    2886:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	69 8d       	ldd	r22, Y+25	; 0x19
    288a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a ef       	ldi	r20, 0xFA	; 250
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8d 8b       	std	Y+21, r24	; 0x15
    28a2:	9e 8b       	std	Y+22, r25	; 0x16
    28a4:	af 8b       	std	Y+23, r26	; 0x17
    28a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28a8:	6d 89       	ldd	r22, Y+21	; 0x15
    28aa:	7e 89       	ldd	r23, Y+22	; 0x16
    28ac:	8f 89       	ldd	r24, Y+23	; 0x17
    28ae:	98 8d       	ldd	r25, Y+24	; 0x18
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <LCD_Vid_SendChar4Bit+0x2b8>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9c 8b       	std	Y+20, r25	; 0x14
    28c6:	8b 8b       	std	Y+19, r24	; 0x13
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <LCD_Vid_SendChar4Bit+0x336>
	else if (__tmp > 65535)
    28ca:	6d 89       	ldd	r22, Y+21	; 0x15
    28cc:	7e 89       	ldd	r23, Y+22	; 0x16
    28ce:	8f 89       	ldd	r24, Y+23	; 0x17
    28d0:	98 8d       	ldd	r25, Y+24	; 0x18
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <LCD_Vid_SendChar4Bit+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	69 8d       	ldd	r22, Y+25	; 0x19
    28e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9c 8b       	std	Y+20, r25	; 0x14
    2908:	8b 8b       	std	Y+19, r24	; 0x13
    290a:	0f c0       	rjmp	.+30     	; 0x292a <LCD_Vid_SendChar4Bit+0x318>
    290c:	88 ec       	ldi	r24, 0xC8	; 200
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9a 8b       	std	Y+18, r25	; 0x12
    2912:	89 8b       	std	Y+17, r24	; 0x11
    2914:	89 89       	ldd	r24, Y+17	; 0x11
    2916:	9a 89       	ldd	r25, Y+18	; 0x12
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_Vid_SendChar4Bit+0x306>
    291c:	9a 8b       	std	Y+18, r25	; 0x12
    291e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8b 89       	ldd	r24, Y+19	; 0x13
    2922:	9c 89       	ldd	r25, Y+20	; 0x14
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9c 8b       	std	Y+20, r25	; 0x14
    2928:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8b 89       	ldd	r24, Y+19	; 0x13
    292c:	9c 89       	ldd	r25, Y+20	; 0x14
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <LCD_Vid_SendChar4Bit+0x2fa>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <LCD_Vid_SendChar4Bit+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6d 89       	ldd	r22, Y+21	; 0x15
    2936:	7e 89       	ldd	r23, Y+22	; 0x16
    2938:	8f 89       	ldd	r24, Y+23	; 0x17
    293a:	98 8d       	ldd	r25, Y+24	; 0x18
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9c 8b       	std	Y+20, r25	; 0x14
    2946:	8b 8b       	std	Y+19, r24	; 0x13
    2948:	8b 89       	ldd	r24, Y+19	; 0x13
    294a:	9c 89       	ldd	r25, Y+20	; 0x14
    294c:	98 8b       	std	Y+16, r25	; 0x10
    294e:	8f 87       	std	Y+15, r24	; 0x0f
    2950:	8f 85       	ldd	r24, Y+15	; 0x0f
    2952:	98 89       	ldd	r25, Y+16	; 0x10
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_Vid_SendChar4Bit+0x342>
    2958:	98 8b       	std	Y+16, r25	; 0x10
    295a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(PORTCONTROL,E,LOW);
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	62 e0       	ldi	r22, 0x02	; 2
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	a0 e0       	ldi	r26, 0x00	; 0
    296c:	b0 e4       	ldi	r27, 0x40	; 64
    296e:	8b 87       	std	Y+11, r24	; 0x0b
    2970:	9c 87       	std	Y+12, r25	; 0x0c
    2972:	ad 87       	std	Y+13, r26	; 0x0d
    2974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4a ef       	ldi	r20, 0xFA	; 250
    2984:	54 e4       	ldi	r21, 0x44	; 68
    2986:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	8f 83       	std	Y+7, r24	; 0x07
    2990:	98 87       	std	Y+8, r25	; 0x08
    2992:	a9 87       	std	Y+9, r26	; 0x09
    2994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e8       	ldi	r20, 0x80	; 128
    29a4:	5f e3       	ldi	r21, 0x3F	; 63
    29a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29aa:	88 23       	and	r24, r24
    29ac:	2c f4       	brge	.+10     	; 0x29b8 <LCD_Vid_SendChar4Bit+0x3a6>
		__ticks = 1;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	3f c0       	rjmp	.+126    	; 0x2a36 <LCD_Vid_SendChar4Bit+0x424>
	else if (__tmp > 65535)
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	4f e7       	ldi	r20, 0x7F	; 127
    29c6:	57 e4       	ldi	r21, 0x47	; 71
    29c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	4c f5       	brge	.+82     	; 0x2a22 <LCD_Vid_SendChar4Bit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e2       	ldi	r20, 0x20	; 32
    29de:	51 e4       	ldi	r21, 0x41	; 65
    29e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9e 83       	std	Y+6, r25	; 0x06
    29f6:	8d 83       	std	Y+5, r24	; 0x05
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <LCD_Vid_SendChar4Bit+0x406>
    29fa:	88 ec       	ldi	r24, 0xC8	; 200
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9c 83       	std	Y+4, r25	; 0x04
    2a00:	8b 83       	std	Y+3, r24	; 0x03
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <LCD_Vid_SendChar4Bit+0x3f4>
    2a0a:	9c 83       	std	Y+4, r25	; 0x04
    2a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	9e 81       	ldd	r25, Y+6	; 0x06
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	69 f7       	brne	.-38     	; 0x29fa <LCD_Vid_SendChar4Bit+0x3e8>
    2a20:	14 c0       	rjmp	.+40     	; 0x2a4a <LCD_Vid_SendChar4Bit+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a22:	6f 81       	ldd	r22, Y+7	; 0x07
    2a24:	78 85       	ldd	r23, Y+8	; 0x08
    2a26:	89 85       	ldd	r24, Y+9	; 0x09
    2a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9e 83       	std	Y+6, r25	; 0x06
    2a34:	8d 83       	std	Y+5, r24	; 0x05
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	9a 81       	ldd	r25, Y+2	; 0x02
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <LCD_Vid_SendChar4Bit+0x430>
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    2a4a:	82 e0       	ldi	r24, 0x02	; 2
    2a4c:	62 e0       	ldi	r22, 0x02	; 2
    2a4e:	41 e0       	ldi	r20, 0x01	; 1
    2a50:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>

}
    2a54:	eb 96       	adiw	r28, 0x3b	; 59
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <LCD_Vid_4BitInit>:

void LCD_Vid_4BitInit(void)
{
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	e8 97       	sbiw	r28, 0x38	; 56
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
DIO_SetBinDirection(PORTCONTROL,RS,output);
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetBinDirection(PORTCONTROL,RW,output);
    2a84:	82 e0       	ldi	r24, 0x02	; 2
    2a86:	61 e0       	ldi	r22, 0x01	; 1
    2a88:	41 e0       	ldi	r20, 0x01	; 1
    2a8a:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetBinDirection(PORTCONTROL,E,output);
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	62 e0       	ldi	r22, 0x02	; 2
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetPortValue(PORTDATA,output);
    2a98:	83 e0       	ldi	r24, 0x03	; 3
    2a9a:	61 e0       	ldi	r22, 0x01	; 1
    2a9c:	0e 94 c6 18 	call	0x318c	; 0x318c <DIO_SetPortValue>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 ef       	ldi	r26, 0xF0	; 240
    2aa6:	b1 e4       	ldi	r27, 0x41	; 65
    2aa8:	8d ab       	std	Y+53, r24	; 0x35
    2aaa:	9e ab       	std	Y+54, r25	; 0x36
    2aac:	af ab       	std	Y+55, r26	; 0x37
    2aae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4a ef       	ldi	r20, 0xFA	; 250
    2abe:	54 e4       	ldi	r21, 0x44	; 68
    2ac0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	89 ab       	std	Y+49, r24	; 0x31
    2aca:	9a ab       	std	Y+50, r25	; 0x32
    2acc:	ab ab       	std	Y+51, r26	; 0x33
    2ace:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ad0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	2c f4       	brge	.+10     	; 0x2af2 <LCD_Vid_4BitInit+0x8c>
		__ticks = 1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	98 ab       	std	Y+48, r25	; 0x30
    2aee:	8f a7       	std	Y+47, r24	; 0x2f
    2af0:	3f c0       	rjmp	.+126    	; 0x2b70 <LCD_Vid_4BitInit+0x10a>
	else if (__tmp > 65535)
    2af2:	69 a9       	ldd	r22, Y+49	; 0x31
    2af4:	7a a9       	ldd	r23, Y+50	; 0x32
    2af6:	8b a9       	ldd	r24, Y+51	; 0x33
    2af8:	9c a9       	ldd	r25, Y+52	; 0x34
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	4c f5       	brge	.+82     	; 0x2b5c <LCD_Vid_4BitInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b10:	98 ad       	ldd	r25, Y+56	; 0x38
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e2       	ldi	r20, 0x20	; 32
    2b18:	51 e4       	ldi	r21, 0x41	; 65
    2b1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	98 ab       	std	Y+48, r25	; 0x30
    2b30:	8f a7       	std	Y+47, r24	; 0x2f
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <LCD_Vid_4BitInit+0xec>
    2b34:	88 ec       	ldi	r24, 0xC8	; 200
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9e a7       	std	Y+46, r25	; 0x2e
    2b3a:	8d a7       	std	Y+45, r24	; 0x2d
    2b3c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b3e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <LCD_Vid_4BitInit+0xda>
    2b44:	9e a7       	std	Y+46, r25	; 0x2e
    2b46:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	98 ab       	std	Y+48, r25	; 0x30
    2b50:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b54:	98 a9       	ldd	r25, Y+48	; 0x30
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	69 f7       	brne	.-38     	; 0x2b34 <LCD_Vid_4BitInit+0xce>
    2b5a:	14 c0       	rjmp	.+40     	; 0x2b84 <LCD_Vid_4BitInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b60:	8b a9       	ldd	r24, Y+51	; 0x33
    2b62:	9c a9       	ldd	r25, Y+52	; 0x34
    2b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	98 ab       	std	Y+48, r25	; 0x30
    2b6e:	8f a7       	std	Y+47, r24	; 0x2f
    2b70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b72:	98 a9       	ldd	r25, Y+48	; 0x30
    2b74:	9c a7       	std	Y+44, r25	; 0x2c
    2b76:	8b a7       	std	Y+43, r24	; 0x2b
    2b78:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_Vid_4BitInit+0x116>
    2b80:	9c a7       	std	Y+44, r25	; 0x2c
    2b82:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(30);
LCD_Vid_SendCommand4Bit_test(FunctionSet_4bit);
    2b84:	84 e2       	ldi	r24, 0x24	; 36
    2b86:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_Vid_SendCommand4Bit_test>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e0       	ldi	r26, 0x00	; 0
    2b90:	b0 e4       	ldi	r27, 0x40	; 64
    2b92:	8f a3       	std	Y+39, r24	; 0x27
    2b94:	98 a7       	std	Y+40, r25	; 0x28
    2b96:	a9 a7       	std	Y+41, r26	; 0x29
    2b98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a ef       	ldi	r20, 0xFA	; 250
    2ba8:	54 e4       	ldi	r21, 0x44	; 68
    2baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	8b a3       	std	Y+35, r24	; 0x23
    2bb4:	9c a3       	std	Y+36, r25	; 0x24
    2bb6:	ad a3       	std	Y+37, r26	; 0x25
    2bb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bba:	6b a1       	ldd	r22, Y+35	; 0x23
    2bbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	5f e3       	ldi	r21, 0x3F	; 63
    2bca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bce:	88 23       	and	r24, r24
    2bd0:	2c f4       	brge	.+10     	; 0x2bdc <LCD_Vid_4BitInit+0x176>
		__ticks = 1;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9a a3       	std	Y+34, r25	; 0x22
    2bd8:	89 a3       	std	Y+33, r24	; 0x21
    2bda:	3f c0       	rjmp	.+126    	; 0x2c5a <LCD_Vid_4BitInit+0x1f4>
	else if (__tmp > 65535)
    2bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bde:	7c a1       	ldd	r23, Y+36	; 0x24
    2be0:	8d a1       	ldd	r24, Y+37	; 0x25
    2be2:	9e a1       	ldd	r25, Y+38	; 0x26
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	3f ef       	ldi	r19, 0xFF	; 255
    2be8:	4f e7       	ldi	r20, 0x7F	; 127
    2bea:	57 e4       	ldi	r21, 0x47	; 71
    2bec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bf0:	18 16       	cp	r1, r24
    2bf2:	4c f5       	brge	.+82     	; 0x2c46 <LCD_Vid_4BitInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf4:	6f a1       	ldd	r22, Y+39	; 0x27
    2bf6:	78 a5       	ldd	r23, Y+40	; 0x28
    2bf8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	51 e4       	ldi	r21, 0x41	; 65
    2c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9a a3       	std	Y+34, r25	; 0x22
    2c1a:	89 a3       	std	Y+33, r24	; 0x21
    2c1c:	0f c0       	rjmp	.+30     	; 0x2c3c <LCD_Vid_4BitInit+0x1d6>
    2c1e:	88 ec       	ldi	r24, 0xC8	; 200
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	98 a3       	std	Y+32, r25	; 0x20
    2c24:	8f 8f       	std	Y+31, r24	; 0x1f
    2c26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c28:	98 a1       	ldd	r25, Y+32	; 0x20
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <LCD_Vid_4BitInit+0x1c4>
    2c2e:	98 a3       	std	Y+32, r25	; 0x20
    2c30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c32:	89 a1       	ldd	r24, Y+33	; 0x21
    2c34:	9a a1       	ldd	r25, Y+34	; 0x22
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	9a a3       	std	Y+34, r25	; 0x22
    2c3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	69 f7       	brne	.-38     	; 0x2c1e <LCD_Vid_4BitInit+0x1b8>
    2c44:	14 c0       	rjmp	.+40     	; 0x2c6e <LCD_Vid_4BitInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c46:	6b a1       	ldd	r22, Y+35	; 0x23
    2c48:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9a a3       	std	Y+34, r25	; 0x22
    2c58:	89 a3       	std	Y+33, r24	; 0x21
    2c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c60:	8d 8f       	std	Y+29, r24	; 0x1d
    2c62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_Vid_4BitInit+0x200>
    2c6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c6c:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2);
LCD_Vid_SendCommand4Bit(DisplayON);
    2c6e:	8e e0       	ldi	r24, 0x0E	; 14
    2c70:	0e 94 df 10 	call	0x21be	; 0x21be <LCD_Vid_SendCommand4Bit>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	a0 e0       	ldi	r26, 0x00	; 0
    2c7a:	b0 e4       	ldi	r27, 0x40	; 64
    2c7c:	89 8f       	std	Y+25, r24	; 0x19
    2c7e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c80:	ab 8f       	std	Y+27, r26	; 0x1b
    2c82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c84:	69 8d       	ldd	r22, Y+25	; 0x19
    2c86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	4a ef       	ldi	r20, 0xFA	; 250
    2c92:	54 e4       	ldi	r21, 0x44	; 68
    2c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	8d 8b       	std	Y+21, r24	; 0x15
    2c9e:	9e 8b       	std	Y+22, r25	; 0x16
    2ca0:	af 8b       	std	Y+23, r26	; 0x17
    2ca2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    2caa:	98 8d       	ldd	r25, Y+24	; 0x18
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	2c f4       	brge	.+10     	; 0x2cc6 <LCD_Vid_4BitInit+0x260>
		__ticks = 1;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9c 8b       	std	Y+20, r25	; 0x14
    2cc2:	8b 8b       	std	Y+19, r24	; 0x13
    2cc4:	3f c0       	rjmp	.+126    	; 0x2d44 <LCD_Vid_4BitInit+0x2de>
	else if (__tmp > 65535)
    2cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	3f ef       	ldi	r19, 0xFF	; 255
    2cd2:	4f e7       	ldi	r20, 0x7F	; 127
    2cd4:	57 e4       	ldi	r21, 0x47	; 71
    2cd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cda:	18 16       	cp	r1, r24
    2cdc:	4c f5       	brge	.+82     	; 0x2d30 <LCD_Vid_4BitInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cde:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e2       	ldi	r20, 0x20	; 32
    2cec:	51 e4       	ldi	r21, 0x41	; 65
    2cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9c 8b       	std	Y+20, r25	; 0x14
    2d04:	8b 8b       	std	Y+19, r24	; 0x13
    2d06:	0f c0       	rjmp	.+30     	; 0x2d26 <LCD_Vid_4BitInit+0x2c0>
    2d08:	88 ec       	ldi	r24, 0xC8	; 200
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9a 8b       	std	Y+18, r25	; 0x12
    2d0e:	89 8b       	std	Y+17, r24	; 0x11
    2d10:	89 89       	ldd	r24, Y+17	; 0x11
    2d12:	9a 89       	ldd	r25, Y+18	; 0x12
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_Vid_4BitInit+0x2ae>
    2d18:	9a 8b       	std	Y+18, r25	; 0x12
    2d1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	9c 8b       	std	Y+20, r25	; 0x14
    2d24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d26:	8b 89       	ldd	r24, Y+19	; 0x13
    2d28:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	69 f7       	brne	.-38     	; 0x2d08 <LCD_Vid_4BitInit+0x2a2>
    2d2e:	14 c0       	rjmp	.+40     	; 0x2d58 <LCD_Vid_4BitInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d30:	6d 89       	ldd	r22, Y+21	; 0x15
    2d32:	7e 89       	ldd	r23, Y+22	; 0x16
    2d34:	8f 89       	ldd	r24, Y+23	; 0x17
    2d36:	98 8d       	ldd	r25, Y+24	; 0x18
    2d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	9c 8b       	std	Y+20, r25	; 0x14
    2d42:	8b 8b       	std	Y+19, r24	; 0x13
    2d44:	8b 89       	ldd	r24, Y+19	; 0x13
    2d46:	9c 89       	ldd	r25, Y+20	; 0x14
    2d48:	98 8b       	std	Y+16, r25	; 0x10
    2d4a:	8f 87       	std	Y+15, r24	; 0x0f
    2d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d4e:	98 89       	ldd	r25, Y+16	; 0x10
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <LCD_Vid_4BitInit+0x2ea>
    2d54:	98 8b       	std	Y+16, r25	; 0x10
    2d56:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
LCD_Vid_SendCommand4Bit(DisplayClear);
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 df 10 	call	0x21be	; 0x21be <LCD_Vid_SendCommand4Bit>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	a0 e0       	ldi	r26, 0x00	; 0
    2d64:	b0 e4       	ldi	r27, 0x40	; 64
    2d66:	8b 87       	std	Y+11, r24	; 0x0b
    2d68:	9c 87       	std	Y+12, r25	; 0x0c
    2d6a:	ad 87       	std	Y+13, r26	; 0x0d
    2d6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a ef       	ldi	r20, 0xFA	; 250
    2d7c:	54 e4       	ldi	r21, 0x44	; 68
    2d7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	8f 83       	std	Y+7, r24	; 0x07
    2d88:	98 87       	std	Y+8, r25	; 0x08
    2d8a:	a9 87       	std	Y+9, r26	; 0x09
    2d8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d90:	78 85       	ldd	r23, Y+8	; 0x08
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <LCD_Vid_4BitInit+0x34a>
		__ticks = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	3f c0       	rjmp	.+126    	; 0x2e2e <LCD_Vid_4BitInit+0x3c8>
	else if (__tmp > 65535)
    2db0:	6f 81       	ldd	r22, Y+7	; 0x07
    2db2:	78 85       	ldd	r23, Y+8	; 0x08
    2db4:	89 85       	ldd	r24, Y+9	; 0x09
    2db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	4c f5       	brge	.+82     	; 0x2e1a <LCD_Vid_4BitInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9e 83       	std	Y+6, r25	; 0x06
    2dee:	8d 83       	std	Y+5, r24	; 0x05
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <LCD_Vid_4BitInit+0x3aa>
    2df2:	88 ec       	ldi	r24, 0xC8	; 200
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9c 83       	std	Y+4, r25	; 0x04
    2df8:	8b 83       	std	Y+3, r24	; 0x03
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <LCD_Vid_4BitInit+0x398>
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	9e 83       	std	Y+6, r25	; 0x06
    2e0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <LCD_Vid_4BitInit+0x38c>
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <LCD_Vid_4BitInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9e 83       	std	Y+6, r25	; 0x06
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
    2e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e30:	9e 81       	ldd	r25, Y+6	; 0x06
    2e32:	9a 83       	std	Y+2, r25	; 0x02
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <LCD_Vid_4BitInit+0x3d4>
    2e3e:	9a 83       	std	Y+2, r25	; 0x02
    2e40:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
LCD_Vid_SendCommand4Bit(EntryModeSet);
    2e42:	86 e0       	ldi	r24, 0x06	; 6
    2e44:	0e 94 df 10 	call	0x21be	; 0x21be <LCD_Vid_SendCommand4Bit>

}
    2e48:	e8 96       	adiw	r28, 0x38	; 56
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	f8 94       	cli
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	08 95       	ret

00002e5a <LCD_goToRowColumn>:
void LCD_goToRowColumn(unsigned char row,unsigned char col)
{
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <LCD_goToRowColumn+0x6>
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <LCD_goToRowColumn+0x8>
    2e62:	0f 92       	push	r0
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	8a 83       	std	Y+2, r24	; 0x02
    2e6a:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char Address;

	/* first of all calculate the required address */
	switch(row)
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	3d 83       	std	Y+5, r19	; 0x05
    2e74:	2c 83       	std	Y+4, r18	; 0x04
    2e76:	8c 81       	ldd	r24, Y+4	; 0x04
    2e78:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	c1 f0       	breq	.+48     	; 0x2eb0 <LCD_goToRowColumn+0x56>
    2e80:	2c 81       	ldd	r18, Y+4	; 0x04
    2e82:	3d 81       	ldd	r19, Y+5	; 0x05
    2e84:	22 30       	cpi	r18, 0x02	; 2
    2e86:	31 05       	cpc	r19, r1
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <LCD_goToRowColumn+0x3a>
    2e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	61 f0       	breq	.+24     	; 0x2eaa <LCD_goToRowColumn+0x50>
    2e92:	19 c0       	rjmp	.+50     	; 0x2ec6 <LCD_goToRowColumn+0x6c>
    2e94:	2c 81       	ldd	r18, Y+4	; 0x04
    2e96:	3d 81       	ldd	r19, Y+5	; 0x05
    2e98:	22 30       	cpi	r18, 0x02	; 2
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	69 f0       	breq	.+26     	; 0x2eb8 <LCD_goToRowColumn+0x5e>
    2e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea2:	83 30       	cpi	r24, 0x03	; 3
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	61 f0       	breq	.+24     	; 0x2ec0 <LCD_goToRowColumn+0x66>
    2ea8:	0e c0       	rjmp	.+28     	; 0x2ec6 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	0b c0       	rjmp	.+22     	; 0x2ec6 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	80 5c       	subi	r24, 0xC0	; 192
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	07 c0       	rjmp	.+14     	; 0x2ec6 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	80 5f       	subi	r24, 0xF0	; 240
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	80 5b       	subi	r24, 0xB0	; 176
    2ec4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_Vid_SendCommand(Address | 0x80);
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	80 68       	ori	r24, 0x80	; 128
    2eca:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_Vid_SendCommand>
}
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <lcd_write_num>:
void lcd_write_num(uint32_t x)
{
    2ede:	ef 92       	push	r14
    2ee0:	ff 92       	push	r15
    2ee2:	0f 93       	push	r16
    2ee4:	1f 93       	push	r17
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	28 97       	sbiw	r28, 0x08	; 8
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	6d 83       	std	Y+5, r22	; 0x05
    2efc:	7e 83       	std	Y+6, r23	; 0x06
    2efe:	8f 83       	std	Y+7, r24	; 0x07
    2f00:	98 87       	std	Y+8, r25	; 0x08
	uint32_t y=1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	a0 e0       	ldi	r26, 0x00	; 0
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	ab 83       	std	Y+3, r26	; 0x03
    2f10:	bc 83       	std	Y+4, r27	; 0x04
	if(x==0)
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	9e 81       	ldd	r25, Y+6	; 0x06
    2f16:	af 81       	ldd	r26, Y+7	; 0x07
    2f18:	b8 85       	ldd	r27, Y+8	; 0x08
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	a1 05       	cpc	r26, r1
    2f1e:	b1 05       	cpc	r27, r1
    2f20:	d1 f5       	brne	.+116    	; 0x2f96 <lcd_write_num+0xb8>
	{
		LCD_Vid_SendChar('0');
    2f22:	80 e3       	ldi	r24, 0x30	; 48
    2f24:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Vid_SendChar>
    2f28:	36 c0       	rjmp	.+108    	; 0x2f96 <lcd_write_num+0xb8>
		LCD_Vid_SendChar('-');
		x=x*-1;
	}
	while(x!=0)
	{
		y=(y*10)+(x%10);
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f30:	bc 81       	ldd	r27, Y+4	; 0x04
    2f32:	2a e0       	ldi	r18, 0x0A	; 10
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 6f 1c 	call	0x38de	; 0x38de <__mulsi3>
    2f42:	7b 01       	movw	r14, r22
    2f44:	8c 01       	movw	r16, r24
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	af 81       	ldd	r26, Y+7	; 0x07
    2f4c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f4e:	2a e0       	ldi	r18, 0x0A	; 10
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 8e 1c 	call	0x391c	; 0x391c <__udivmodsi4>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	8e 0d       	add	r24, r14
    2f64:	9f 1d       	adc	r25, r15
    2f66:	a0 1f       	adc	r26, r16
    2f68:	b1 1f       	adc	r27, r17
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	ab 83       	std	Y+3, r26	; 0x03
    2f70:	bc 83       	std	Y+4, r27	; 0x04
				x=(x/10);
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	af 81       	ldd	r26, Y+7	; 0x07
    2f78:	b8 85       	ldd	r27, Y+8	; 0x08
    2f7a:	2a e0       	ldi	r18, 0x0A	; 10
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 8e 1c 	call	0x391c	; 0x391c <__udivmodsi4>
    2f8a:	da 01       	movw	r26, r20
    2f8c:	c9 01       	movw	r24, r18
    2f8e:	8d 83       	std	Y+5, r24	; 0x05
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	af 83       	std	Y+7, r26	; 0x07
    2f94:	b8 87       	std	Y+8, r27	; 0x08
	if(x<0)
	{
		LCD_Vid_SendChar('-');
		x=x*-1;
	}
	while(x!=0)
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	af 81       	ldd	r26, Y+7	; 0x07
    2f9c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	a1 05       	cpc	r26, r1
    2fa2:	b1 05       	cpc	r27, r1
    2fa4:	11 f6       	brne	.-124    	; 0x2f2a <lcd_write_num+0x4c>
    2fa6:	23 c0       	rjmp	.+70     	; 0x2fee <lcd_write_num+0x110>
		y=(y*10)+(x%10);
				x=(x/10);
	}
	while (y!=1)
	{
		LCD_Vid_SendChar((y%10)+48);
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	ab 81       	ldd	r26, Y+3	; 0x03
    2fae:	bc 81       	ldd	r27, Y+4	; 0x04
    2fb0:	2a e0       	ldi	r18, 0x0A	; 10
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e0       	ldi	r20, 0x00	; 0
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	0e 94 8e 1c 	call	0x391c	; 0x391c <__udivmodsi4>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	80 5d       	subi	r24, 0xD0	; 208
    2fc6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Vid_SendChar>
		y=y/10;
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fce:	ab 81       	ldd	r26, Y+3	; 0x03
    2fd0:	bc 81       	ldd	r27, Y+4	; 0x04
    2fd2:	2a e0       	ldi	r18, 0x0A	; 10
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 8e 1c 	call	0x391c	; 0x391c <__udivmodsi4>
    2fe2:	da 01       	movw	r26, r20
    2fe4:	c9 01       	movw	r24, r18
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	ab 83       	std	Y+3, r26	; 0x03
    2fec:	bc 83       	std	Y+4, r27	; 0x04
	while(x!=0)
	{
		y=(y*10)+(x%10);
				x=(x/10);
	}
	while (y!=1)
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ff4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ff6:	81 30       	cpi	r24, 0x01	; 1
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	a1 05       	cpc	r26, r1
    2ffc:	b1 05       	cpc	r27, r1
    2ffe:	a1 f6       	brne	.-88     	; 0x2fa8 <lcd_write_num+0xca>
	{
		LCD_Vid_SendChar((y%10)+48);
		y=y/10;
	}

}
    3000:	28 96       	adiw	r28, 0x08	; 8
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	1f 91       	pop	r17
    3012:	0f 91       	pop	r16
    3014:	ff 90       	pop	r15
    3016:	ef 90       	pop	r14
    3018:	08 95       	ret

0000301a <LCD_voidWriteString>:
void LCD_voidWriteString(unsigned char * str)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	00 d0       	rcall	.+0      	; 0x3020 <LCD_voidWriteString+0x6>
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	9a 83       	std	Y+2, r25	; 0x02
    3026:	89 83       	std	Y+1, r24	; 0x01
    3028:	0b c0       	rjmp	.+22     	; 0x3040 <LCD_voidWriteString+0x26>
	while(*str !='\0'){
		LCD_Vid_SendChar(*str++);}
    302a:	e9 81       	ldd	r30, Y+1	; 0x01
    302c:	fa 81       	ldd	r31, Y+2	; 0x02
    302e:	20 81       	ld	r18, Z
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	01 96       	adiw	r24, 0x01	; 1
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	82 2f       	mov	r24, r18
    303c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Vid_SendChar>
	}

}
void LCD_voidWriteString(unsigned char * str)
{
	while(*str !='\0'){
    3040:	e9 81       	ldd	r30, Y+1	; 0x01
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	80 81       	ld	r24, Z
    3046:	88 23       	and	r24, r24
    3048:	81 f7       	brne	.-32     	; 0x302a <LCD_voidWriteString+0x10>
		LCD_Vid_SendChar(*str++);}
}
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	62 97       	sbiw	r28, 0x12	; 18
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	9a 8b       	std	Y+18, r25	; 0x12
    306a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    306c:	89 89       	ldd	r24, Y+17	; 0x11
    306e:	9a 89       	ldd	r25, Y+18	; 0x12
    3070:	9e 01       	movw	r18, r28
    3072:	2f 5f       	subi	r18, 0xFF	; 255
    3074:	3f 4f       	sbci	r19, 0xFF	; 255
    3076:	b9 01       	movw	r22, r18
    3078:	4a e0       	ldi	r20, 0x0A	; 10
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <itoa>
   LCD_voidWriteString(buff);
    3080:	ce 01       	movw	r24, r28
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	0e 94 0d 18 	call	0x301a	; 0x301a <LCD_voidWriteString>
}
    3088:	62 96       	adiw	r28, 0x12	; 18
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <DIO_SetPortdirection>:
#include "DIO_Types.h"
#include "bit_math.h"
#include "dio.h"

void DIO_SetPortdirection(DIO_PORT_ID Port_Id ,DIO_Direction Direction)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <DIO_SetPortdirection+0x6>
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <DIO_SetPortdirection+0x8>
    30a2:	00 d0       	rcall	.+0      	; 0x30a4 <DIO_SetPortdirection+0xa>
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	6a 83       	std	Y+2, r22	; 0x02
	if (output == Direction)
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	81 30       	cpi	r24, 0x01	; 1
    30b0:	99 f5       	brne	.+102    	; 0x3118 <DIO_SetPortdirection+0x7e>
	{
		switch(Port_Id)
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	3e 83       	std	Y+6, r19	; 0x06
    30ba:	2d 83       	std	Y+5, r18	; 0x05
    30bc:	8d 81       	ldd	r24, Y+5	; 0x05
    30be:	9e 81       	ldd	r25, Y+6	; 0x06
    30c0:	81 30       	cpi	r24, 0x01	; 1
    30c2:	91 05       	cpc	r25, r1
    30c4:	d1 f0       	breq	.+52     	; 0x30fa <DIO_SetPortdirection+0x60>
    30c6:	2d 81       	ldd	r18, Y+5	; 0x05
    30c8:	3e 81       	ldd	r19, Y+6	; 0x06
    30ca:	22 30       	cpi	r18, 0x02	; 2
    30cc:	31 05       	cpc	r19, r1
    30ce:	2c f4       	brge	.+10     	; 0x30da <DIO_SetPortdirection+0x40>
    30d0:	8d 81       	ldd	r24, Y+5	; 0x05
    30d2:	9e 81       	ldd	r25, Y+6	; 0x06
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	61 f0       	breq	.+24     	; 0x30f0 <DIO_SetPortdirection+0x56>
    30d8:	50 c0       	rjmp	.+160    	; 0x317a <DIO_SetPortdirection+0xe0>
    30da:	2d 81       	ldd	r18, Y+5	; 0x05
    30dc:	3e 81       	ldd	r19, Y+6	; 0x06
    30de:	22 30       	cpi	r18, 0x02	; 2
    30e0:	31 05       	cpc	r19, r1
    30e2:	81 f0       	breq	.+32     	; 0x3104 <DIO_SetPortdirection+0x6a>
    30e4:	8d 81       	ldd	r24, Y+5	; 0x05
    30e6:	9e 81       	ldd	r25, Y+6	; 0x06
    30e8:	83 30       	cpi	r24, 0x03	; 3
    30ea:	91 05       	cpc	r25, r1
    30ec:	81 f0       	breq	.+32     	; 0x310e <DIO_SetPortdirection+0x74>
    30ee:	45 c0       	rjmp	.+138    	; 0x317a <DIO_SetPortdirection+0xe0>
		{
		case PORTA: DDRA_Reg= 0xff;break;
    30f0:	ea e3       	ldi	r30, 0x3A	; 58
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	80 83       	st	Z, r24
    30f8:	40 c0       	rjmp	.+128    	; 0x317a <DIO_SetPortdirection+0xe0>
		case PORTB: DDRB_Reg= 0xff;break;
    30fa:	e7 e3       	ldi	r30, 0x37	; 55
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	8f ef       	ldi	r24, 0xFF	; 255
    3100:	80 83       	st	Z, r24
    3102:	3b c0       	rjmp	.+118    	; 0x317a <DIO_SetPortdirection+0xe0>
		case PORTC: DDRC_Reg= 0xff;break;
    3104:	e4 e3       	ldi	r30, 0x34	; 52
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	8f ef       	ldi	r24, 0xFF	; 255
    310a:	80 83       	st	Z, r24
    310c:	36 c0       	rjmp	.+108    	; 0x317a <DIO_SetPortdirection+0xe0>
		case PORTD: DDRD_Reg= 0xff;break;
    310e:	e1 e3       	ldi	r30, 0x31	; 49
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	8f ef       	ldi	r24, 0xFF	; 255
    3114:	80 83       	st	Z, r24
    3116:	31 c0       	rjmp	.+98     	; 0x317a <DIO_SetPortdirection+0xe0>

		}

	}
	else if(input == Direction)
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	88 23       	and	r24, r24
    311c:	71 f5       	brne	.+92     	; 0x317a <DIO_SetPortdirection+0xe0>
	{
			switch(Port_Id)
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	3c 83       	std	Y+4, r19	; 0x04
    3126:	2b 83       	std	Y+3, r18	; 0x03
    3128:	8b 81       	ldd	r24, Y+3	; 0x03
    312a:	9c 81       	ldd	r25, Y+4	; 0x04
    312c:	81 30       	cpi	r24, 0x01	; 1
    312e:	91 05       	cpc	r25, r1
    3130:	c9 f0       	breq	.+50     	; 0x3164 <DIO_SetPortdirection+0xca>
    3132:	2b 81       	ldd	r18, Y+3	; 0x03
    3134:	3c 81       	ldd	r19, Y+4	; 0x04
    3136:	22 30       	cpi	r18, 0x02	; 2
    3138:	31 05       	cpc	r19, r1
    313a:	2c f4       	brge	.+10     	; 0x3146 <DIO_SetPortdirection+0xac>
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	61 f0       	breq	.+24     	; 0x315c <DIO_SetPortdirection+0xc2>
    3144:	1a c0       	rjmp	.+52     	; 0x317a <DIO_SetPortdirection+0xe0>
    3146:	2b 81       	ldd	r18, Y+3	; 0x03
    3148:	3c 81       	ldd	r19, Y+4	; 0x04
    314a:	22 30       	cpi	r18, 0x02	; 2
    314c:	31 05       	cpc	r19, r1
    314e:	71 f0       	breq	.+28     	; 0x316c <DIO_SetPortdirection+0xd2>
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	83 30       	cpi	r24, 0x03	; 3
    3156:	91 05       	cpc	r25, r1
    3158:	69 f0       	breq	.+26     	; 0x3174 <DIO_SetPortdirection+0xda>
    315a:	0f c0       	rjmp	.+30     	; 0x317a <DIO_SetPortdirection+0xe0>
			{
			case PORTA:DDRA_Reg = 0x00;break;
    315c:	ea e3       	ldi	r30, 0x3A	; 58
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	10 82       	st	Z, r1
    3162:	0b c0       	rjmp	.+22     	; 0x317a <DIO_SetPortdirection+0xe0>
			case PORTB:DDRB_Reg = 0x00;break;
    3164:	e7 e3       	ldi	r30, 0x37	; 55
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	10 82       	st	Z, r1
    316a:	07 c0       	rjmp	.+14     	; 0x317a <DIO_SetPortdirection+0xe0>
			case PORTC:DDRC_Reg = 0x00;break;
    316c:	e4 e3       	ldi	r30, 0x34	; 52
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	10 82       	st	Z, r1
    3172:	03 c0       	rjmp	.+6      	; 0x317a <DIO_SetPortdirection+0xe0>
			case PORTD:DDRD_Reg = 0x00;break;
    3174:	e1 e3       	ldi	r30, 0x31	; 49
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	10 82       	st	Z, r1
			}
	}
}
    317a:	26 96       	adiw	r28, 0x06	; 6
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <DIO_SetPortValue>:

void DIO_SetPortValue(DIO_PORT_ID Port_Id,unsigned char value)
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	00 d0       	rcall	.+0      	; 0x3192 <DIO_SetPortValue+0x6>
    3192:	00 d0       	rcall	.+0      	; 0x3194 <DIO_SetPortValue+0x8>
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port_Id)
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	28 2f       	mov	r18, r24
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	3c 83       	std	Y+4, r19	; 0x04
    31a4:	2b 83       	std	Y+3, r18	; 0x03
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	9c 81       	ldd	r25, Y+4	; 0x04
    31aa:	81 30       	cpi	r24, 0x01	; 1
    31ac:	91 05       	cpc	r25, r1
    31ae:	d1 f0       	breq	.+52     	; 0x31e4 <DIO_SetPortValue+0x58>
    31b0:	2b 81       	ldd	r18, Y+3	; 0x03
    31b2:	3c 81       	ldd	r19, Y+4	; 0x04
    31b4:	22 30       	cpi	r18, 0x02	; 2
    31b6:	31 05       	cpc	r19, r1
    31b8:	2c f4       	brge	.+10     	; 0x31c4 <DIO_SetPortValue+0x38>
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	61 f0       	breq	.+24     	; 0x31da <DIO_SetPortValue+0x4e>
    31c2:	1e c0       	rjmp	.+60     	; 0x3200 <DIO_SetPortValue+0x74>
    31c4:	2b 81       	ldd	r18, Y+3	; 0x03
    31c6:	3c 81       	ldd	r19, Y+4	; 0x04
    31c8:	22 30       	cpi	r18, 0x02	; 2
    31ca:	31 05       	cpc	r19, r1
    31cc:	81 f0       	breq	.+32     	; 0x31ee <DIO_SetPortValue+0x62>
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	83 30       	cpi	r24, 0x03	; 3
    31d4:	91 05       	cpc	r25, r1
    31d6:	81 f0       	breq	.+32     	; 0x31f8 <DIO_SetPortValue+0x6c>
    31d8:	13 c0       	rjmp	.+38     	; 0x3200 <DIO_SetPortValue+0x74>
			{
			case PORTA: PORTA_Reg= value;break;
    31da:	eb e3       	ldi	r30, 0x3B	; 59
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	80 83       	st	Z, r24
    31e2:	0e c0       	rjmp	.+28     	; 0x3200 <DIO_SetPortValue+0x74>
			case PORTB: PORTB_Reg= value;break;
    31e4:	e8 e3       	ldi	r30, 0x38	; 56
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	80 83       	st	Z, r24
    31ec:	09 c0       	rjmp	.+18     	; 0x3200 <DIO_SetPortValue+0x74>
			case PORTC: PORTC_Reg= value;break;
    31ee:	e5 e3       	ldi	r30, 0x35	; 53
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	8a 81       	ldd	r24, Y+2	; 0x02
    31f4:	80 83       	st	Z, r24
    31f6:	04 c0       	rjmp	.+8      	; 0x3200 <DIO_SetPortValue+0x74>
			case PORTD: PORTD_Reg= value;break;
    31f8:	e2 e3       	ldi	r30, 0x32	; 50
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	80 83       	st	Z, r24
			}

};
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <DIO_SetBinDirection>:
void DIO_SetBinDirection(DIO_PORT_ID Port_Id,DIO_PORT_ID pin_id,DIO_Direction Direction)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	27 97       	sbiw	r28, 0x07	; 7
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	6a 83       	std	Y+2, r22	; 0x02
    3226:	4b 83       	std	Y+3, r20	; 0x03
	if(Port_Id <= PORTD && pin_id<=pin7)
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	84 30       	cpi	r24, 0x04	; 4
    322c:	08 f0       	brcs	.+2      	; 0x3230 <DIO_SetBinDirection+0x22>
    322e:	ee c0       	rjmp	.+476    	; 0x340c <DIO_SetBinDirection+0x1fe>
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	88 30       	cpi	r24, 0x08	; 8
    3234:	08 f0       	brcs	.+2      	; 0x3238 <DIO_SetBinDirection+0x2a>
    3236:	ea c0       	rjmp	.+468    	; 0x340c <DIO_SetBinDirection+0x1fe>
{	if ( output == Direction )
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	81 30       	cpi	r24, 0x01	; 1
    323c:	09 f0       	breq	.+2      	; 0x3240 <DIO_SetBinDirection+0x32>
    323e:	6f c0       	rjmp	.+222    	; 0x331e <DIO_SetBinDirection+0x110>
{
	switch(Port_Id)
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	3f 83       	std	Y+7, r19	; 0x07
    3248:	2e 83       	std	Y+6, r18	; 0x06
    324a:	8e 81       	ldd	r24, Y+6	; 0x06
    324c:	9f 81       	ldd	r25, Y+7	; 0x07
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	91 05       	cpc	r25, r1
    3252:	49 f1       	breq	.+82     	; 0x32a6 <DIO_SetBinDirection+0x98>
    3254:	2e 81       	ldd	r18, Y+6	; 0x06
    3256:	3f 81       	ldd	r19, Y+7	; 0x07
    3258:	22 30       	cpi	r18, 0x02	; 2
    325a:	31 05       	cpc	r19, r1
    325c:	2c f4       	brge	.+10     	; 0x3268 <DIO_SetBinDirection+0x5a>
    325e:	8e 81       	ldd	r24, Y+6	; 0x06
    3260:	9f 81       	ldd	r25, Y+7	; 0x07
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	61 f0       	breq	.+24     	; 0x327e <DIO_SetBinDirection+0x70>
    3266:	d2 c0       	rjmp	.+420    	; 0x340c <DIO_SetBinDirection+0x1fe>
    3268:	2e 81       	ldd	r18, Y+6	; 0x06
    326a:	3f 81       	ldd	r19, Y+7	; 0x07
    326c:	22 30       	cpi	r18, 0x02	; 2
    326e:	31 05       	cpc	r19, r1
    3270:	71 f1       	breq	.+92     	; 0x32ce <DIO_SetBinDirection+0xc0>
    3272:	8e 81       	ldd	r24, Y+6	; 0x06
    3274:	9f 81       	ldd	r25, Y+7	; 0x07
    3276:	83 30       	cpi	r24, 0x03	; 3
    3278:	91 05       	cpc	r25, r1
    327a:	e9 f1       	breq	.+122    	; 0x32f6 <DIO_SetBinDirection+0xe8>
    327c:	c7 c0       	rjmp	.+398    	; 0x340c <DIO_SetBinDirection+0x1fe>
				{
				case PORTA: SET_BIT(DDRA_Reg,pin_id);break;
    327e:	aa e3       	ldi	r26, 0x3A	; 58
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	ea e3       	ldi	r30, 0x3A	; 58
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	48 2f       	mov	r20, r24
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	02 2e       	mov	r0, r18
    3296:	02 c0       	rjmp	.+4      	; 0x329c <DIO_SetBinDirection+0x8e>
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	0a 94       	dec	r0
    329e:	e2 f7       	brpl	.-8      	; 0x3298 <DIO_SetBinDirection+0x8a>
    32a0:	84 2b       	or	r24, r20
    32a2:	8c 93       	st	X, r24
    32a4:	b3 c0       	rjmp	.+358    	; 0x340c <DIO_SetBinDirection+0x1fe>
				case PORTB: SET_BIT(DDRB_Reg,pin_id);break;
    32a6:	a7 e3       	ldi	r26, 0x37	; 55
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e7 e3       	ldi	r30, 0x37	; 55
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	80 81       	ld	r24, Z
    32b0:	48 2f       	mov	r20, r24
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	02 2e       	mov	r0, r18
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <DIO_SetBinDirection+0xb6>
    32c0:	88 0f       	add	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	0a 94       	dec	r0
    32c6:	e2 f7       	brpl	.-8      	; 0x32c0 <DIO_SetBinDirection+0xb2>
    32c8:	84 2b       	or	r24, r20
    32ca:	8c 93       	st	X, r24
    32cc:	9f c0       	rjmp	.+318    	; 0x340c <DIO_SetBinDirection+0x1fe>
				case PORTC: SET_BIT(DDRC_Reg,pin_id);break;
    32ce:	a4 e3       	ldi	r26, 0x34	; 52
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	e4 e3       	ldi	r30, 0x34	; 52
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	48 2f       	mov	r20, r24
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	28 2f       	mov	r18, r24
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	02 2e       	mov	r0, r18
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <DIO_SetBinDirection+0xde>
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	0a 94       	dec	r0
    32ee:	e2 f7       	brpl	.-8      	; 0x32e8 <DIO_SetBinDirection+0xda>
    32f0:	84 2b       	or	r24, r20
    32f2:	8c 93       	st	X, r24
    32f4:	8b c0       	rjmp	.+278    	; 0x340c <DIO_SetBinDirection+0x1fe>
				case PORTD: SET_BIT(DDRD_Reg,pin_id);break;
    32f6:	a1 e3       	ldi	r26, 0x31	; 49
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	e1 e3       	ldi	r30, 0x31	; 49
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	48 2f       	mov	r20, r24
    3302:	8a 81       	ldd	r24, Y+2	; 0x02
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	02 2e       	mov	r0, r18
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <DIO_SetBinDirection+0x106>
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	0a 94       	dec	r0
    3316:	e2 f7       	brpl	.-8      	; 0x3310 <DIO_SetBinDirection+0x102>
    3318:	84 2b       	or	r24, r20
    331a:	8c 93       	st	X, r24
    331c:	77 c0       	rjmp	.+238    	; 0x340c <DIO_SetBinDirection+0x1fe>
				}
}
       else if(input == Direction )
    331e:	8b 81       	ldd	r24, Y+3	; 0x03
    3320:	88 23       	and	r24, r24
    3322:	09 f0       	breq	.+2      	; 0x3326 <DIO_SetBinDirection+0x118>
    3324:	73 c0       	rjmp	.+230    	; 0x340c <DIO_SetBinDirection+0x1fe>
	{
	switch(Port_Id)
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	3d 83       	std	Y+5, r19	; 0x05
    332e:	2c 83       	std	Y+4, r18	; 0x04
    3330:	8c 81       	ldd	r24, Y+4	; 0x04
    3332:	9d 81       	ldd	r25, Y+5	; 0x05
    3334:	81 30       	cpi	r24, 0x01	; 1
    3336:	91 05       	cpc	r25, r1
    3338:	59 f1       	breq	.+86     	; 0x3390 <DIO_SetBinDirection+0x182>
    333a:	2c 81       	ldd	r18, Y+4	; 0x04
    333c:	3d 81       	ldd	r19, Y+5	; 0x05
    333e:	22 30       	cpi	r18, 0x02	; 2
    3340:	31 05       	cpc	r19, r1
    3342:	2c f4       	brge	.+10     	; 0x334e <DIO_SetBinDirection+0x140>
    3344:	8c 81       	ldd	r24, Y+4	; 0x04
    3346:	9d 81       	ldd	r25, Y+5	; 0x05
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	69 f0       	breq	.+26     	; 0x3366 <DIO_SetBinDirection+0x158>
    334c:	5f c0       	rjmp	.+190    	; 0x340c <DIO_SetBinDirection+0x1fe>
    334e:	2c 81       	ldd	r18, Y+4	; 0x04
    3350:	3d 81       	ldd	r19, Y+5	; 0x05
    3352:	22 30       	cpi	r18, 0x02	; 2
    3354:	31 05       	cpc	r19, r1
    3356:	89 f1       	breq	.+98     	; 0x33ba <DIO_SetBinDirection+0x1ac>
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
    335a:	9d 81       	ldd	r25, Y+5	; 0x05
    335c:	83 30       	cpi	r24, 0x03	; 3
    335e:	91 05       	cpc	r25, r1
    3360:	09 f4       	brne	.+2      	; 0x3364 <DIO_SetBinDirection+0x156>
    3362:	40 c0       	rjmp	.+128    	; 0x33e4 <DIO_SetBinDirection+0x1d6>
    3364:	53 c0       	rjmp	.+166    	; 0x340c <DIO_SetBinDirection+0x1fe>
			{
			case PORTA : CLEAR_BIT(DDRA_Reg,pin_id) ; break;
    3366:	aa e3       	ldi	r26, 0x3A	; 58
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	ea e3       	ldi	r30, 0x3A	; 58
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	48 2f       	mov	r20, r24
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	28 2f       	mov	r18, r24
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	02 2e       	mov	r0, r18
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <DIO_SetBinDirection+0x176>
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	0a 94       	dec	r0
    3386:	e2 f7       	brpl	.-8      	; 0x3380 <DIO_SetBinDirection+0x172>
    3388:	80 95       	com	r24
    338a:	84 23       	and	r24, r20
    338c:	8c 93       	st	X, r24
    338e:	3e c0       	rjmp	.+124    	; 0x340c <DIO_SetBinDirection+0x1fe>
			case PORTB : CLEAR_BIT(DDRB_Reg,pin_id) ; break;
    3390:	a7 e3       	ldi	r26, 0x37	; 55
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e7 e3       	ldi	r30, 0x37	; 55
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	48 2f       	mov	r20, r24
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	28 2f       	mov	r18, r24
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	02 2e       	mov	r0, r18
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <DIO_SetBinDirection+0x1a0>
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	0a 94       	dec	r0
    33b0:	e2 f7       	brpl	.-8      	; 0x33aa <DIO_SetBinDirection+0x19c>
    33b2:	80 95       	com	r24
    33b4:	84 23       	and	r24, r20
    33b6:	8c 93       	st	X, r24
    33b8:	29 c0       	rjmp	.+82     	; 0x340c <DIO_SetBinDirection+0x1fe>
			case PORTC : CLEAR_BIT(DDRC_Reg,pin_id) ; break;
    33ba:	a4 e3       	ldi	r26, 0x34	; 52
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e4 e3       	ldi	r30, 0x34	; 52
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	48 2f       	mov	r20, r24
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	02 2e       	mov	r0, r18
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <DIO_SetBinDirection+0x1ca>
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	0a 94       	dec	r0
    33da:	e2 f7       	brpl	.-8      	; 0x33d4 <DIO_SetBinDirection+0x1c6>
    33dc:	80 95       	com	r24
    33de:	84 23       	and	r24, r20
    33e0:	8c 93       	st	X, r24
    33e2:	14 c0       	rjmp	.+40     	; 0x340c <DIO_SetBinDirection+0x1fe>
			case PORTD : CLEAR_BIT(DDRD_Reg,pin_id) ; break;
    33e4:	a1 e3       	ldi	r26, 0x31	; 49
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e1 e3       	ldi	r30, 0x31	; 49
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	48 2f       	mov	r20, r24
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	02 2e       	mov	r0, r18
    33fc:	02 c0       	rjmp	.+4      	; 0x3402 <DIO_SetBinDirection+0x1f4>
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	0a 94       	dec	r0
    3404:	e2 f7       	brpl	.-8      	; 0x33fe <DIO_SetBinDirection+0x1f0>
    3406:	80 95       	com	r24
    3408:	84 23       	and	r24, r20
    340a:	8c 93       	st	X, r24
			}

}

}
}
    340c:	27 96       	adiw	r28, 0x07	; 7
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <DIO_SetPinValue>:
void DIO_SetPinValue(DIO_PORT_ID Port_Id,DIO_PORT_ID pin_id,DIO_Value value)
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	27 97       	sbiw	r28, 0x07	; 7
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	89 83       	std	Y+1, r24	; 0x01
    3434:	6a 83       	std	Y+2, r22	; 0x02
    3436:	4b 83       	std	Y+3, r20	; 0x03
	if(Port_Id <= PORTD && pin_id<=pin7)
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	84 30       	cpi	r24, 0x04	; 4
    343c:	08 f0       	brcs	.+2      	; 0x3440 <DIO_SetPinValue+0x22>
    343e:	ee c0       	rjmp	.+476    	; 0x361c <DIO_SetPinValue+0x1fe>
    3440:	8a 81       	ldd	r24, Y+2	; 0x02
    3442:	88 30       	cpi	r24, 0x08	; 8
    3444:	08 f0       	brcs	.+2      	; 0x3448 <DIO_SetPinValue+0x2a>
    3446:	ea c0       	rjmp	.+468    	; 0x361c <DIO_SetPinValue+0x1fe>
	{
if(value == HIGH)
    3448:	8b 81       	ldd	r24, Y+3	; 0x03
    344a:	81 30       	cpi	r24, 0x01	; 1
    344c:	09 f0       	breq	.+2      	; 0x3450 <DIO_SetPinValue+0x32>
    344e:	6f c0       	rjmp	.+222    	; 0x352e <DIO_SetPinValue+0x110>
{switch(Port_Id)
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	28 2f       	mov	r18, r24
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	3f 83       	std	Y+7, r19	; 0x07
    3458:	2e 83       	std	Y+6, r18	; 0x06
    345a:	8e 81       	ldd	r24, Y+6	; 0x06
    345c:	9f 81       	ldd	r25, Y+7	; 0x07
    345e:	81 30       	cpi	r24, 0x01	; 1
    3460:	91 05       	cpc	r25, r1
    3462:	49 f1       	breq	.+82     	; 0x34b6 <DIO_SetPinValue+0x98>
    3464:	2e 81       	ldd	r18, Y+6	; 0x06
    3466:	3f 81       	ldd	r19, Y+7	; 0x07
    3468:	22 30       	cpi	r18, 0x02	; 2
    346a:	31 05       	cpc	r19, r1
    346c:	2c f4       	brge	.+10     	; 0x3478 <DIO_SetPinValue+0x5a>
    346e:	8e 81       	ldd	r24, Y+6	; 0x06
    3470:	9f 81       	ldd	r25, Y+7	; 0x07
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	61 f0       	breq	.+24     	; 0x348e <DIO_SetPinValue+0x70>
    3476:	d2 c0       	rjmp	.+420    	; 0x361c <DIO_SetPinValue+0x1fe>
    3478:	2e 81       	ldd	r18, Y+6	; 0x06
    347a:	3f 81       	ldd	r19, Y+7	; 0x07
    347c:	22 30       	cpi	r18, 0x02	; 2
    347e:	31 05       	cpc	r19, r1
    3480:	71 f1       	breq	.+92     	; 0x34de <DIO_SetPinValue+0xc0>
    3482:	8e 81       	ldd	r24, Y+6	; 0x06
    3484:	9f 81       	ldd	r25, Y+7	; 0x07
    3486:	83 30       	cpi	r24, 0x03	; 3
    3488:	91 05       	cpc	r25, r1
    348a:	e9 f1       	breq	.+122    	; 0x3506 <DIO_SetPinValue+0xe8>
    348c:	c7 c0       	rjmp	.+398    	; 0x361c <DIO_SetPinValue+0x1fe>
{
case PORTA: SET_BIT(PORTA_Reg,pin_id);break;
    348e:	ab e3       	ldi	r26, 0x3B	; 59
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	eb e3       	ldi	r30, 0x3B	; 59
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	48 2f       	mov	r20, r24
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	28 2f       	mov	r18, r24
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	02 2e       	mov	r0, r18
    34a6:	02 c0       	rjmp	.+4      	; 0x34ac <DIO_SetPinValue+0x8e>
    34a8:	88 0f       	add	r24, r24
    34aa:	99 1f       	adc	r25, r25
    34ac:	0a 94       	dec	r0
    34ae:	e2 f7       	brpl	.-8      	; 0x34a8 <DIO_SetPinValue+0x8a>
    34b0:	84 2b       	or	r24, r20
    34b2:	8c 93       	st	X, r24
    34b4:	b3 c0       	rjmp	.+358    	; 0x361c <DIO_SetPinValue+0x1fe>
case PORTB: SET_BIT(PORTB_Reg,pin_id);break;
    34b6:	a8 e3       	ldi	r26, 0x38	; 56
    34b8:	b0 e0       	ldi	r27, 0x00	; 0
    34ba:	e8 e3       	ldi	r30, 0x38	; 56
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	80 81       	ld	r24, Z
    34c0:	48 2f       	mov	r20, r24
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	28 2f       	mov	r18, r24
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	02 2e       	mov	r0, r18
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <DIO_SetPinValue+0xb6>
    34d0:	88 0f       	add	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	0a 94       	dec	r0
    34d6:	e2 f7       	brpl	.-8      	; 0x34d0 <DIO_SetPinValue+0xb2>
    34d8:	84 2b       	or	r24, r20
    34da:	8c 93       	st	X, r24
    34dc:	9f c0       	rjmp	.+318    	; 0x361c <DIO_SetPinValue+0x1fe>
case PORTC: SET_BIT(PORTC_Reg,pin_id);break;
    34de:	a5 e3       	ldi	r26, 0x35	; 53
    34e0:	b0 e0       	ldi	r27, 0x00	; 0
    34e2:	e5 e3       	ldi	r30, 0x35	; 53
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	80 81       	ld	r24, Z
    34e8:	48 2f       	mov	r20, r24
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	02 2e       	mov	r0, r18
    34f6:	02 c0       	rjmp	.+4      	; 0x34fc <DIO_SetPinValue+0xde>
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	0a 94       	dec	r0
    34fe:	e2 f7       	brpl	.-8      	; 0x34f8 <DIO_SetPinValue+0xda>
    3500:	84 2b       	or	r24, r20
    3502:	8c 93       	st	X, r24
    3504:	8b c0       	rjmp	.+278    	; 0x361c <DIO_SetPinValue+0x1fe>
case PORTD: SET_BIT(PORTD_Reg,pin_id);break;
    3506:	a2 e3       	ldi	r26, 0x32	; 50
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	e2 e3       	ldi	r30, 0x32	; 50
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	48 2f       	mov	r20, r24
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	28 2f       	mov	r18, r24
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	02 2e       	mov	r0, r18
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <DIO_SetPinValue+0x106>
    3520:	88 0f       	add	r24, r24
    3522:	99 1f       	adc	r25, r25
    3524:	0a 94       	dec	r0
    3526:	e2 f7       	brpl	.-8      	; 0x3520 <DIO_SetPinValue+0x102>
    3528:	84 2b       	or	r24, r20
    352a:	8c 93       	st	X, r24
    352c:	77 c0       	rjmp	.+238    	; 0x361c <DIO_SetPinValue+0x1fe>
}}
else if(value == LOW)
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	88 23       	and	r24, r24
    3532:	09 f0       	breq	.+2      	; 0x3536 <DIO_SetPinValue+0x118>
    3534:	73 c0       	rjmp	.+230    	; 0x361c <DIO_SetPinValue+0x1fe>
{
	switch(Port_Id)
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	28 2f       	mov	r18, r24
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	3d 83       	std	Y+5, r19	; 0x05
    353e:	2c 83       	std	Y+4, r18	; 0x04
    3540:	8c 81       	ldd	r24, Y+4	; 0x04
    3542:	9d 81       	ldd	r25, Y+5	; 0x05
    3544:	81 30       	cpi	r24, 0x01	; 1
    3546:	91 05       	cpc	r25, r1
    3548:	59 f1       	breq	.+86     	; 0x35a0 <DIO_SetPinValue+0x182>
    354a:	2c 81       	ldd	r18, Y+4	; 0x04
    354c:	3d 81       	ldd	r19, Y+5	; 0x05
    354e:	22 30       	cpi	r18, 0x02	; 2
    3550:	31 05       	cpc	r19, r1
    3552:	2c f4       	brge	.+10     	; 0x355e <DIO_SetPinValue+0x140>
    3554:	8c 81       	ldd	r24, Y+4	; 0x04
    3556:	9d 81       	ldd	r25, Y+5	; 0x05
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	69 f0       	breq	.+26     	; 0x3576 <DIO_SetPinValue+0x158>
    355c:	5f c0       	rjmp	.+190    	; 0x361c <DIO_SetPinValue+0x1fe>
    355e:	2c 81       	ldd	r18, Y+4	; 0x04
    3560:	3d 81       	ldd	r19, Y+5	; 0x05
    3562:	22 30       	cpi	r18, 0x02	; 2
    3564:	31 05       	cpc	r19, r1
    3566:	89 f1       	breq	.+98     	; 0x35ca <DIO_SetPinValue+0x1ac>
    3568:	8c 81       	ldd	r24, Y+4	; 0x04
    356a:	9d 81       	ldd	r25, Y+5	; 0x05
    356c:	83 30       	cpi	r24, 0x03	; 3
    356e:	91 05       	cpc	r25, r1
    3570:	09 f4       	brne	.+2      	; 0x3574 <DIO_SetPinValue+0x156>
    3572:	40 c0       	rjmp	.+128    	; 0x35f4 <DIO_SetPinValue+0x1d6>
    3574:	53 c0       	rjmp	.+166    	; 0x361c <DIO_SetPinValue+0x1fe>
{
case PORTA: CLEAR_BIT(PORTA_Reg,pin_id);break;
    3576:	ab e3       	ldi	r26, 0x3B	; 59
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	eb e3       	ldi	r30, 0x3B	; 59
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	48 2f       	mov	r20, r24
    3582:	8a 81       	ldd	r24, Y+2	; 0x02
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	02 2e       	mov	r0, r18
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <DIO_SetPinValue+0x176>
    3590:	88 0f       	add	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	0a 94       	dec	r0
    3596:	e2 f7       	brpl	.-8      	; 0x3590 <DIO_SetPinValue+0x172>
    3598:	80 95       	com	r24
    359a:	84 23       	and	r24, r20
    359c:	8c 93       	st	X, r24
    359e:	3e c0       	rjmp	.+124    	; 0x361c <DIO_SetPinValue+0x1fe>
case PORTB: CLEAR_BIT(PORTB_Reg,pin_id);break;
    35a0:	a8 e3       	ldi	r26, 0x38	; 56
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e8 e3       	ldi	r30, 0x38	; 56
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	48 2f       	mov	r20, r24
    35ac:	8a 81       	ldd	r24, Y+2	; 0x02
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	02 2e       	mov	r0, r18
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <DIO_SetPinValue+0x1a0>
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	0a 94       	dec	r0
    35c0:	e2 f7       	brpl	.-8      	; 0x35ba <DIO_SetPinValue+0x19c>
    35c2:	80 95       	com	r24
    35c4:	84 23       	and	r24, r20
    35c6:	8c 93       	st	X, r24
    35c8:	29 c0       	rjmp	.+82     	; 0x361c <DIO_SetPinValue+0x1fe>
case PORTC: CLEAR_BIT(PORTC_Reg,pin_id);break;
    35ca:	a5 e3       	ldi	r26, 0x35	; 53
    35cc:	b0 e0       	ldi	r27, 0x00	; 0
    35ce:	e5 e3       	ldi	r30, 0x35	; 53
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	80 81       	ld	r24, Z
    35d4:	48 2f       	mov	r20, r24
    35d6:	8a 81       	ldd	r24, Y+2	; 0x02
    35d8:	28 2f       	mov	r18, r24
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	02 2e       	mov	r0, r18
    35e2:	02 c0       	rjmp	.+4      	; 0x35e8 <DIO_SetPinValue+0x1ca>
    35e4:	88 0f       	add	r24, r24
    35e6:	99 1f       	adc	r25, r25
    35e8:	0a 94       	dec	r0
    35ea:	e2 f7       	brpl	.-8      	; 0x35e4 <DIO_SetPinValue+0x1c6>
    35ec:	80 95       	com	r24
    35ee:	84 23       	and	r24, r20
    35f0:	8c 93       	st	X, r24
    35f2:	14 c0       	rjmp	.+40     	; 0x361c <DIO_SetPinValue+0x1fe>
case PORTD: CLEAR_BIT(PORTD_Reg,pin_id);break;
    35f4:	a2 e3       	ldi	r26, 0x32	; 50
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	e2 e3       	ldi	r30, 0x32	; 50
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	48 2f       	mov	r20, r24
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	28 2f       	mov	r18, r24
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	02 2e       	mov	r0, r18
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <DIO_SetPinValue+0x1f4>
    360e:	88 0f       	add	r24, r24
    3610:	99 1f       	adc	r25, r25
    3612:	0a 94       	dec	r0
    3614:	e2 f7       	brpl	.-8      	; 0x360e <DIO_SetPinValue+0x1f0>
    3616:	80 95       	com	r24
    3618:	84 23       	and	r24, r20
    361a:	8c 93       	st	X, r24
}
}
}};
    361c:	27 96       	adiw	r28, 0x07	; 7
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <DIO_GetPinValue>:
DIO_Value DIO_GetPinValue(DIO_PORT_ID Port_Id,DIO_PORT_ID pin_id)
	{DIO_Value val;
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	00 d0       	rcall	.+0      	; 0x3634 <DIO_GetPinValue+0x6>
    3634:	00 d0       	rcall	.+0      	; 0x3636 <DIO_GetPinValue+0x8>
    3636:	0f 92       	push	r0
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	8a 83       	std	Y+2, r24	; 0x02
    363e:	6b 83       	std	Y+3, r22	; 0x03

		if(Port_Id <= PORTD && pin_id<=pin7)
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	84 30       	cpi	r24, 0x04	; 4
    3644:	08 f0       	brcs	.+2      	; 0x3648 <DIO_GetPinValue+0x1a>
    3646:	6b c0       	rjmp	.+214    	; 0x371e <DIO_GetPinValue+0xf0>
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	88 30       	cpi	r24, 0x08	; 8
    364c:	08 f0       	brcs	.+2      	; 0x3650 <DIO_GetPinValue+0x22>
    364e:	67 c0       	rjmp	.+206    	; 0x371e <DIO_GetPinValue+0xf0>
		{		switch (Port_Id)
    3650:	8a 81       	ldd	r24, Y+2	; 0x02
    3652:	28 2f       	mov	r18, r24
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	3d 83       	std	Y+5, r19	; 0x05
    3658:	2c 83       	std	Y+4, r18	; 0x04
    365a:	4c 81       	ldd	r20, Y+4	; 0x04
    365c:	5d 81       	ldd	r21, Y+5	; 0x05
    365e:	41 30       	cpi	r20, 0x01	; 1
    3660:	51 05       	cpc	r21, r1
    3662:	41 f1       	breq	.+80     	; 0x36b4 <DIO_GetPinValue+0x86>
    3664:	8c 81       	ldd	r24, Y+4	; 0x04
    3666:	9d 81       	ldd	r25, Y+5	; 0x05
    3668:	82 30       	cpi	r24, 0x02	; 2
    366a:	91 05       	cpc	r25, r1
    366c:	34 f4       	brge	.+12     	; 0x367a <DIO_GetPinValue+0x4c>
    366e:	2c 81       	ldd	r18, Y+4	; 0x04
    3670:	3d 81       	ldd	r19, Y+5	; 0x05
    3672:	21 15       	cp	r18, r1
    3674:	31 05       	cpc	r19, r1
    3676:	61 f0       	breq	.+24     	; 0x3690 <DIO_GetPinValue+0x62>
    3678:	52 c0       	rjmp	.+164    	; 0x371e <DIO_GetPinValue+0xf0>
    367a:	4c 81       	ldd	r20, Y+4	; 0x04
    367c:	5d 81       	ldd	r21, Y+5	; 0x05
    367e:	42 30       	cpi	r20, 0x02	; 2
    3680:	51 05       	cpc	r21, r1
    3682:	51 f1       	breq	.+84     	; 0x36d8 <DIO_GetPinValue+0xaa>
    3684:	8c 81       	ldd	r24, Y+4	; 0x04
    3686:	9d 81       	ldd	r25, Y+5	; 0x05
    3688:	83 30       	cpi	r24, 0x03	; 3
    368a:	91 05       	cpc	r25, r1
    368c:	b9 f1       	breq	.+110    	; 0x36fc <DIO_GetPinValue+0xce>
    368e:	47 c0       	rjmp	.+142    	; 0x371e <DIO_GetPinValue+0xf0>
			{   case PORTA : val = GET_BIT(PINA_Reg,pin_id);break;
    3690:	e9 e3       	ldi	r30, 0x39	; 57
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	88 2f       	mov	r24, r24
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	a9 01       	movw	r20, r18
    36a2:	02 c0       	rjmp	.+4      	; 0x36a8 <DIO_GetPinValue+0x7a>
    36a4:	55 95       	asr	r21
    36a6:	47 95       	ror	r20
    36a8:	8a 95       	dec	r24
    36aa:	e2 f7       	brpl	.-8      	; 0x36a4 <DIO_GetPinValue+0x76>
    36ac:	ca 01       	movw	r24, r20
    36ae:	81 70       	andi	r24, 0x01	; 1
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	35 c0       	rjmp	.+106    	; 0x371e <DIO_GetPinValue+0xf0>
				case PORTB : val = GET_BIT(PINB_Reg,pin_id);break;
    36b4:	e6 e3       	ldi	r30, 0x36	; 54
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	8b 81       	ldd	r24, Y+3	; 0x03
    36c0:	88 2f       	mov	r24, r24
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	a9 01       	movw	r20, r18
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <DIO_GetPinValue+0x9e>
    36c8:	55 95       	asr	r21
    36ca:	47 95       	ror	r20
    36cc:	8a 95       	dec	r24
    36ce:	e2 f7       	brpl	.-8      	; 0x36c8 <DIO_GetPinValue+0x9a>
    36d0:	ca 01       	movw	r24, r20
    36d2:	81 70       	andi	r24, 0x01	; 1
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	23 c0       	rjmp	.+70     	; 0x371e <DIO_GetPinValue+0xf0>
				case PORTC : val = GET_BIT(PINC_Reg,pin_id);break;
    36d8:	e3 e3       	ldi	r30, 0x33	; 51
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	28 2f       	mov	r18, r24
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	a9 01       	movw	r20, r18
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <DIO_GetPinValue+0xc2>
    36ec:	55 95       	asr	r21
    36ee:	47 95       	ror	r20
    36f0:	8a 95       	dec	r24
    36f2:	e2 f7       	brpl	.-8      	; 0x36ec <DIO_GetPinValue+0xbe>
    36f4:	ca 01       	movw	r24, r20
    36f6:	81 70       	andi	r24, 0x01	; 1
    36f8:	89 83       	std	Y+1, r24	; 0x01
    36fa:	11 c0       	rjmp	.+34     	; 0x371e <DIO_GetPinValue+0xf0>
				case PORTD : val = GET_BIT(PIND_Reg,pin_id);break;
    36fc:	e0 e3       	ldi	r30, 0x30	; 48
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	28 2f       	mov	r18, r24
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	8b 81       	ldd	r24, Y+3	; 0x03
    3708:	88 2f       	mov	r24, r24
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	a9 01       	movw	r20, r18
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <DIO_GetPinValue+0xe6>
    3710:	55 95       	asr	r21
    3712:	47 95       	ror	r20
    3714:	8a 95       	dec	r24
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <DIO_GetPinValue+0xe2>
    3718:	ca 01       	movw	r24, r20
    371a:	81 70       	andi	r24, 0x01	; 1
    371c:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		return val;
    371e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	cf 91       	pop	r28
    372c:	df 91       	pop	r29
    372e:	08 95       	ret

00003730 <main>:
#include"dio.h"
#include"dio_reg.h"
#include"LCD.h"

int main()
{DIO_SetBinDirection(PORTB, 0, input);
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	60 e0       	ldi	r22, 0x00	; 0
    373c:	40 e0       	ldi	r20, 0x00	; 0
    373e:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetBinDirection(PORTB, 1, input);
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	61 e0       	ldi	r22, 0x01	; 1
    3746:	40 e0       	ldi	r20, 0x00	; 0
    3748:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetBinDirection(PORTB,2,input);
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	62 e0       	ldi	r22, 0x02	; 2
    3750:	40 e0       	ldi	r20, 0x00	; 0
    3752:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetBinDirection(PORTB,3,output);
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	63 e0       	ldi	r22, 0x03	; 3
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
DIO_SetBinDirection(PORTB,4,output);
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	64 e0       	ldi	r22, 0x04	; 4
    3764:	41 e0       	ldi	r20, 0x01	; 1
    3766:	0e 94 07 19 	call	0x320e	; 0x320e <DIO_SetBinDirection>
while(1){

if(DIO_GetPinValue(PORTB, 0)==0&&DIO_GetPinValue(PORTB, 1)==1&&DIO_GetPinValue(PORTB, 2)==0)
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    3772:	88 23       	and	r24, r24
    3774:	21 f5       	brne	.+72     	; 0x37be <main+0x8e>
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	61 e0       	ldi	r22, 0x01	; 1
    377a:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    377e:	81 30       	cpi	r24, 0x01	; 1
    3780:	f1 f4       	brne	.+60     	; 0x37be <main+0x8e>
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	62 e0       	ldi	r22, 0x02	; 2
    3786:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    378a:	88 23       	and	r24, r24
    378c:	c1 f4       	brne	.+48     	; 0x37be <main+0x8e>

{DIO_SetPinValue(PORTB,pin3,LOW);
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	63 e0       	ldi	r22, 0x03	; 3
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTB,pin4,HIGH);
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	64 e0       	ldi	r22, 0x04	; 4
    379c:	41 e0       	ldi	r20, 0x01	; 1
    379e:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTB,pin5,LOW);
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	65 e0       	ldi	r22, 0x05	; 5
    37a6:	40 e0       	ldi	r20, 0x00	; 0
    37a8:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	DIO_SetPinValue(PORTB,pin6,HIGH);
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	66 e0       	ldi	r22, 0x06	; 6
    37b0:	41 e0       	ldi	r20, 0x01	; 1
    37b2:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
LCD_Vid_SendChar('A');
    37b6:	81 e4       	ldi	r24, 0x41	; 65
    37b8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Vid_SendChar>
    37bc:	d6 cf       	rjmp	.-84     	; 0x376a <main+0x3a>
}

else if ((DIO_GetPinValue(PORTB, 0)==1&&DIO_GetPinValue(PORTB, 1)==0&&DIO_GetPinValue(PORTB, 2)==0)||(DIO_GetPinValue(PORTB, 0)==1&&DIO_GetPinValue(PORTB, 1)==1&&DIO_GetPinValue(PORTB, 2)==0))
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    37c6:	81 30       	cpi	r24, 0x01	; 1
    37c8:	61 f4       	brne	.+24     	; 0x37e2 <main+0xb2>
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    37d2:	88 23       	and	r24, r24
    37d4:	31 f4       	brne	.+12     	; 0x37e2 <main+0xb2>
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	62 e0       	ldi	r22, 0x02	; 2
    37da:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    37de:	88 23       	and	r24, r24
    37e0:	91 f0       	breq	.+36     	; 0x3806 <main+0xd6>
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	60 e0       	ldi	r22, 0x00	; 0
    37e6:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    37ea:	81 30       	cpi	r24, 0x01	; 1
    37ec:	21 f5       	brne	.+72     	; 0x3836 <main+0x106>
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	61 e0       	ldi	r22, 0x01	; 1
    37f2:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    37f6:	81 30       	cpi	r24, 0x01	; 1
    37f8:	f1 f4       	brne	.+60     	; 0x3836 <main+0x106>
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	62 e0       	ldi	r22, 0x02	; 2
    37fe:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    3802:	88 23       	and	r24, r24
    3804:	c1 f4       	brne	.+48     	; 0x3836 <main+0x106>

{DIO_SetPinValue(PORTB,pin3,LOW);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	63 e0       	ldi	r22, 0x03	; 3
    380a:	40 e0       	ldi	r20, 0x00	; 0
    380c:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTB,pin4,HIGH);
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	64 e0       	ldi	r22, 0x04	; 4
    3814:	41 e0       	ldi	r20, 0x01	; 1
    3816:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	DIO_SetPinValue(PORTB,pin5,LOW);
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	65 e0       	ldi	r22, 0x05	; 5
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	DIO_SetPinValue(PORTB,pin6,LOW);
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	66 e0       	ldi	r22, 0x06	; 6
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
LCD_Vid_SendChar('B');
    382e:	82 e4       	ldi	r24, 0x42	; 66
    3830:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Vid_SendChar>
    3834:	9a cf       	rjmp	.-204    	; 0x376a <main+0x3a>
}

else if ((DIO_GetPinValue(PORTB, 0)==0&&DIO_GetPinValue(PORTB, 1)==0&&DIO_GetPinValue(PORTB, 2)==1)||(DIO_GetPinValue(PORTB, 0)==0&&DIO_GetPinValue(PORTB, 1)==1&&DIO_GetPinValue(PORTB, 2)==1))
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	60 e0       	ldi	r22, 0x00	; 0
    383a:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    383e:	88 23       	and	r24, r24
    3840:	61 f4       	brne	.+24     	; 0x385a <main+0x12a>
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	61 e0       	ldi	r22, 0x01	; 1
    3846:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    384a:	88 23       	and	r24, r24
    384c:	31 f4       	brne	.+12     	; 0x385a <main+0x12a>
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	62 e0       	ldi	r22, 0x02	; 2
    3852:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    3856:	81 30       	cpi	r24, 0x01	; 1
    3858:	91 f0       	breq	.+36     	; 0x387e <main+0x14e>
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    3862:	88 23       	and	r24, r24
    3864:	21 f5       	brne	.+72     	; 0x38ae <main+0x17e>
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	61 e0       	ldi	r22, 0x01	; 1
    386a:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    386e:	81 30       	cpi	r24, 0x01	; 1
    3870:	f1 f4       	brne	.+60     	; 0x38ae <main+0x17e>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	62 e0       	ldi	r22, 0x02	; 2
    3876:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_GetPinValue>
    387a:	81 30       	cpi	r24, 0x01	; 1
    387c:	c1 f4       	brne	.+48     	; 0x38ae <main+0x17e>
{DIO_SetPinValue(PORTB,pin5,LOW);
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	65 e0       	ldi	r22, 0x05	; 5
    3882:	40 e0       	ldi	r20, 0x00	; 0
    3884:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTB,pin6,HIGH);
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	66 e0       	ldi	r22, 0x06	; 6
    388c:	41 e0       	ldi	r20, 0x01	; 1
    388e:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTB,pin3,LOW);
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	63 e0       	ldi	r22, 0x03	; 3
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTB,pin4,LOW);
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	64 e0       	ldi	r22, 0x04	; 4
    38a0:	40 e0       	ldi	r20, 0x00	; 0
    38a2:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
LCD_Vid_SendChar('C');
    38a6:	83 e4       	ldi	r24, 0x43	; 67
    38a8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Vid_SendChar>
    38ac:	5e cf       	rjmp	.-324    	; 0x376a <main+0x3a>
}
else
{DIO_SetPinValue(PORTB,pin3,LOW);
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	63 e0       	ldi	r22, 0x03	; 3
    38b2:	40 e0       	ldi	r20, 0x00	; 0
    38b4:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTB,pin4,LOW);
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	64 e0       	ldi	r22, 0x04	; 4
    38bc:	40 e0       	ldi	r20, 0x00	; 0
    38be:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
DIO_SetPinValue(PORTB,pin5,LOW);
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	65 e0       	ldi	r22, 0x05	; 5
    38c6:	40 e0       	ldi	r20, 0x00	; 0
    38c8:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
	DIO_SetPinValue(PORTB,pin6,LOW);
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	66 e0       	ldi	r22, 0x06	; 6
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	0e 94 0f 1a 	call	0x341e	; 0x341e <DIO_SetPinValue>
LCD_Vid_SendChar('D');
    38d6:	84 e4       	ldi	r24, 0x44	; 68
    38d8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Vid_SendChar>
    38dc:	46 cf       	rjmp	.-372    	; 0x376a <main+0x3a>

000038de <__mulsi3>:
    38de:	62 9f       	mul	r22, r18
    38e0:	d0 01       	movw	r26, r0
    38e2:	73 9f       	mul	r23, r19
    38e4:	f0 01       	movw	r30, r0
    38e6:	82 9f       	mul	r24, r18
    38e8:	e0 0d       	add	r30, r0
    38ea:	f1 1d       	adc	r31, r1
    38ec:	64 9f       	mul	r22, r20
    38ee:	e0 0d       	add	r30, r0
    38f0:	f1 1d       	adc	r31, r1
    38f2:	92 9f       	mul	r25, r18
    38f4:	f0 0d       	add	r31, r0
    38f6:	83 9f       	mul	r24, r19
    38f8:	f0 0d       	add	r31, r0
    38fa:	74 9f       	mul	r23, r20
    38fc:	f0 0d       	add	r31, r0
    38fe:	65 9f       	mul	r22, r21
    3900:	f0 0d       	add	r31, r0
    3902:	99 27       	eor	r25, r25
    3904:	72 9f       	mul	r23, r18
    3906:	b0 0d       	add	r27, r0
    3908:	e1 1d       	adc	r30, r1
    390a:	f9 1f       	adc	r31, r25
    390c:	63 9f       	mul	r22, r19
    390e:	b0 0d       	add	r27, r0
    3910:	e1 1d       	adc	r30, r1
    3912:	f9 1f       	adc	r31, r25
    3914:	bd 01       	movw	r22, r26
    3916:	cf 01       	movw	r24, r30
    3918:	11 24       	eor	r1, r1
    391a:	08 95       	ret

0000391c <__udivmodsi4>:
    391c:	a1 e2       	ldi	r26, 0x21	; 33
    391e:	1a 2e       	mov	r1, r26
    3920:	aa 1b       	sub	r26, r26
    3922:	bb 1b       	sub	r27, r27
    3924:	fd 01       	movw	r30, r26
    3926:	0d c0       	rjmp	.+26     	; 0x3942 <__udivmodsi4_ep>

00003928 <__udivmodsi4_loop>:
    3928:	aa 1f       	adc	r26, r26
    392a:	bb 1f       	adc	r27, r27
    392c:	ee 1f       	adc	r30, r30
    392e:	ff 1f       	adc	r31, r31
    3930:	a2 17       	cp	r26, r18
    3932:	b3 07       	cpc	r27, r19
    3934:	e4 07       	cpc	r30, r20
    3936:	f5 07       	cpc	r31, r21
    3938:	20 f0       	brcs	.+8      	; 0x3942 <__udivmodsi4_ep>
    393a:	a2 1b       	sub	r26, r18
    393c:	b3 0b       	sbc	r27, r19
    393e:	e4 0b       	sbc	r30, r20
    3940:	f5 0b       	sbc	r31, r21

00003942 <__udivmodsi4_ep>:
    3942:	66 1f       	adc	r22, r22
    3944:	77 1f       	adc	r23, r23
    3946:	88 1f       	adc	r24, r24
    3948:	99 1f       	adc	r25, r25
    394a:	1a 94       	dec	r1
    394c:	69 f7       	brne	.-38     	; 0x3928 <__udivmodsi4_loop>
    394e:	60 95       	com	r22
    3950:	70 95       	com	r23
    3952:	80 95       	com	r24
    3954:	90 95       	com	r25
    3956:	9b 01       	movw	r18, r22
    3958:	ac 01       	movw	r20, r24
    395a:	bd 01       	movw	r22, r26
    395c:	cf 01       	movw	r24, r30
    395e:	08 95       	ret

00003960 <__prologue_saves__>:
    3960:	2f 92       	push	r2
    3962:	3f 92       	push	r3
    3964:	4f 92       	push	r4
    3966:	5f 92       	push	r5
    3968:	6f 92       	push	r6
    396a:	7f 92       	push	r7
    396c:	8f 92       	push	r8
    396e:	9f 92       	push	r9
    3970:	af 92       	push	r10
    3972:	bf 92       	push	r11
    3974:	cf 92       	push	r12
    3976:	df 92       	push	r13
    3978:	ef 92       	push	r14
    397a:	ff 92       	push	r15
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	ca 1b       	sub	r28, r26
    398a:	db 0b       	sbc	r29, r27
    398c:	0f b6       	in	r0, 0x3f	; 63
    398e:	f8 94       	cli
    3990:	de bf       	out	0x3e, r29	; 62
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	cd bf       	out	0x3d, r28	; 61
    3996:	09 94       	ijmp

00003998 <__epilogue_restores__>:
    3998:	2a 88       	ldd	r2, Y+18	; 0x12
    399a:	39 88       	ldd	r3, Y+17	; 0x11
    399c:	48 88       	ldd	r4, Y+16	; 0x10
    399e:	5f 84       	ldd	r5, Y+15	; 0x0f
    39a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    39a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    39a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    39a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    39a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    39aa:	b9 84       	ldd	r11, Y+9	; 0x09
    39ac:	c8 84       	ldd	r12, Y+8	; 0x08
    39ae:	df 80       	ldd	r13, Y+7	; 0x07
    39b0:	ee 80       	ldd	r14, Y+6	; 0x06
    39b2:	fd 80       	ldd	r15, Y+5	; 0x05
    39b4:	0c 81       	ldd	r16, Y+4	; 0x04
    39b6:	1b 81       	ldd	r17, Y+3	; 0x03
    39b8:	aa 81       	ldd	r26, Y+2	; 0x02
    39ba:	b9 81       	ldd	r27, Y+1	; 0x01
    39bc:	ce 0f       	add	r28, r30
    39be:	d1 1d       	adc	r29, r1
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	ed 01       	movw	r28, r26
    39cc:	08 95       	ret

000039ce <itoa>:
    39ce:	fb 01       	movw	r30, r22
    39d0:	9f 01       	movw	r18, r30
    39d2:	e8 94       	clt
    39d4:	42 30       	cpi	r20, 0x02	; 2
    39d6:	c4 f0       	brlt	.+48     	; 0x3a08 <itoa+0x3a>
    39d8:	45 32       	cpi	r20, 0x25	; 37
    39da:	b4 f4       	brge	.+44     	; 0x3a08 <itoa+0x3a>
    39dc:	4a 30       	cpi	r20, 0x0A	; 10
    39de:	29 f4       	brne	.+10     	; 0x39ea <itoa+0x1c>
    39e0:	97 fb       	bst	r25, 7
    39e2:	1e f4       	brtc	.+6      	; 0x39ea <itoa+0x1c>
    39e4:	90 95       	com	r25
    39e6:	81 95       	neg	r24
    39e8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ea:	64 2f       	mov	r22, r20
    39ec:	77 27       	eor	r23, r23
    39ee:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__udivmodhi4>
    39f2:	80 5d       	subi	r24, 0xD0	; 208
    39f4:	8a 33       	cpi	r24, 0x3A	; 58
    39f6:	0c f0       	brlt	.+2      	; 0x39fa <itoa+0x2c>
    39f8:	89 5d       	subi	r24, 0xD9	; 217
    39fa:	81 93       	st	Z+, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	00 97       	sbiw	r24, 0x00	; 0
    3a00:	a1 f7       	brne	.-24     	; 0x39ea <itoa+0x1c>
    3a02:	16 f4       	brtc	.+4      	; 0x3a08 <itoa+0x3a>
    3a04:	5d e2       	ldi	r21, 0x2D	; 45
    3a06:	51 93       	st	Z+, r21
    3a08:	10 82       	st	Z, r1
    3a0a:	c9 01       	movw	r24, r18
    3a0c:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <strrev>

00003a10 <strrev>:
    3a10:	dc 01       	movw	r26, r24
    3a12:	fc 01       	movw	r30, r24
    3a14:	67 2f       	mov	r22, r23
    3a16:	71 91       	ld	r23, Z+
    3a18:	77 23       	and	r23, r23
    3a1a:	e1 f7       	brne	.-8      	; 0x3a14 <strrev+0x4>
    3a1c:	32 97       	sbiw	r30, 0x02	; 2
    3a1e:	04 c0       	rjmp	.+8      	; 0x3a28 <strrev+0x18>
    3a20:	7c 91       	ld	r23, X
    3a22:	6d 93       	st	X+, r22
    3a24:	70 83       	st	Z, r23
    3a26:	62 91       	ld	r22, -Z
    3a28:	ae 17       	cp	r26, r30
    3a2a:	bf 07       	cpc	r27, r31
    3a2c:	c8 f3       	brcs	.-14     	; 0x3a20 <strrev+0x10>
    3a2e:	08 95       	ret

00003a30 <__udivmodhi4>:
    3a30:	aa 1b       	sub	r26, r26
    3a32:	bb 1b       	sub	r27, r27
    3a34:	51 e1       	ldi	r21, 0x11	; 17
    3a36:	07 c0       	rjmp	.+14     	; 0x3a46 <__udivmodhi4_ep>

00003a38 <__udivmodhi4_loop>:
    3a38:	aa 1f       	adc	r26, r26
    3a3a:	bb 1f       	adc	r27, r27
    3a3c:	a6 17       	cp	r26, r22
    3a3e:	b7 07       	cpc	r27, r23
    3a40:	10 f0       	brcs	.+4      	; 0x3a46 <__udivmodhi4_ep>
    3a42:	a6 1b       	sub	r26, r22
    3a44:	b7 0b       	sbc	r27, r23

00003a46 <__udivmodhi4_ep>:
    3a46:	88 1f       	adc	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	5a 95       	dec	r21
    3a4c:	a9 f7       	brne	.-22     	; 0x3a38 <__udivmodhi4_loop>
    3a4e:	80 95       	com	r24
    3a50:	90 95       	com	r25
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	08 95       	ret

00003a58 <_exit>:
    3a58:	f8 94       	cli

00003a5a <__stop_program>:
    3a5a:	ff cf       	rjmp	.-2      	; 0x3a5a <__stop_program>
